"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var button = require("@keystone-ui/button"), core = require("@keystone-ui/core"), _extends = require("@babel/runtime/helpers/extends"), _objectWithoutProperties = require("@babel/runtime/helpers/objectWithoutProperties"), React = require("react"), FocusLock = require("react-focus-lock"), reactRemoveScroll = require("react-remove-scroll"), reactTransitionGroup = require("react-transition-group");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _extends__default = _interopDefault(_extends), _objectWithoutProperties__default = _interopDefault(_objectWithoutProperties), React__default = _interopDefault(React), FocusLock__default = _interopDefault(FocusLock);

function _defineProperty(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value: value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const fadeInAnim = core.keyframes({
  from: {
    opacity: 0
  }
}), easing = "cubic-bezier(0.2, 0, 0, 1)", Blanket = React.forwardRef(((props, ref) => {
  const theme = core.useTheme();
  return core.jsx("div", _extends__default.default({
    ref: ref,
    css: {
      animation: `${fadeInAnim} 320ms ${easing}`,
      backgroundColor: "rgba(0, 0, 0, 0.3)",
      bottom: 0,
      left: 0,
      position: "fixed",
      right: 0,
      top: 0,
      zIndex: theme.elevation.e400
    }
  }, props));
})), ModalContext = React__default.default.createContext(null), DrawerProvider = ({children: children}) => {
  let [drawerStack, setDrawerStack] = React.useState([]);
  const context = {
    drawerStack: drawerStack,
    pushToDrawerStack: React.useCallback((key => {
      setDrawerStack((stack => [ ...stack, key ]));
    }), []),
    popFromDrawerStack: React.useCallback((() => {
      setDrawerStack((stack => stack.slice(0, -1)));
    }), [])
  };
  return React__default.default.createElement(ModalContext.Provider, {
    value: context
  }, children);
}, useDrawerManager = uniqueKey => {
  const modalState = React__default.default.useContext(ModalContext);
  if (null === modalState) throw new Error("This component must have a <DrawerProvider/> ancestor in the same React tree.");
  React.useEffect((() => (modalState.pushToDrawerStack(uniqueKey), () => {
    modalState.popFromDrawerStack();
  })), []);
  let depth = modalState.drawerStack.slice().reverse().indexOf(uniqueKey);
  return -1 === depth ? 0 : depth;
}, DrawerControllerContext = React__default.default.createContext(null), DrawerControllerContextProvider = DrawerControllerContext.Provider, useDrawerControllerContext = () => {
  let context = React.useContext(DrawerControllerContext);
  if (!context) throw new Error("Drawers must be wrapped in a <DrawerController>. You should generally do this outside of the component that renders the <Drawer> or <TabbedDrawer>.");
  return context;
}, DrawerController = ({isOpen: isOpen, children: children}) => React__default.default.createElement(reactTransitionGroup.Transition, {
  appear: !0,
  mountOnEnter: !0,
  unmountOnExit: !0,
  in: isOpen,
  timeout: 150
}, (transitionState => React__default.default.createElement(DrawerControllerContextProvider, {
  value: transitionState
}, children))), DRAWER_WIDTHS = {
  narrow: 580,
  wide: 740
}, easing$1 = "cubic-bezier(0.2, 0, 0, 1)", blanketTransition = {
  entering: {
    opacity: 0
  },
  entered: {
    opacity: 1
  },
  exiting: {
    opacity: 0
  },
  exited: {
    opacity: 0
  }
}, DrawerBase = _ref => {
  let {children: children, initialFocusRef: initialFocusRef, onClose: onClose, onSubmit: onSubmit, width: width = "narrow", transitionState: transitionState} = _ref, props = _objectWithoutProperties__default.default(_ref, [ "children", "initialFocusRef", "onClose", "onSubmit", "width", "transitionState" ]);
  const theme = core.useTheme(), containerRef = React.useRef(null), id = core.useId(), uniqueKey = core.makeId("drawer", id);
  let drawerDepth = useDrawerManager(uniqueKey);
  const activateFocusLock = React.useCallback((() => {
    initialFocusRef && initialFocusRef.current && initialFocusRef.current.focus();
  }), [ initialFocusRef ]), dialogTransition = getDialogTransition(drawerDepth);
  let Tag = "div";
  if (onSubmit) {
    Tag = "form";
    let oldOnSubmit = onSubmit;
    onSubmit = event => {
      event.defaultPrevented || (event.preventDefault(), oldOnSubmit());
    };
  }
  return core.jsx(core.Portal, null, core.jsx(React.Fragment, null, core.jsx(Blanket, {
    onClick: onClose,
    style: _objectSpread2(_objectSpread2({
      transition: "opacity 150ms linear"
    }, blanketTransition[transitionState]), {}, {
      zIndex: theme.elevation.e400
    })
  }), core.jsx(FocusLock__default.default, {
    autoFocus: !0,
    returnFocus: !0,
    onActivation: activateFocusLock
  }, core.jsx(reactRemoveScroll.RemoveScroll, {
    enabled: !0
  }, core.jsx(Tag, _extends__default.default({
    onSubmit: onSubmit,
    "aria-modal": "true",
    role: "dialog",
    ref: containerRef,
    tabIndex: -1,
    onKeyDown: event => {
      "Escape" !== event.key || event.defaultPrevented || (event.preventDefault(), onClose());
    },
    style: dialogTransition[transitionState],
    css: {
      backgroundColor: theme.colors.background,
      bottom: 0,
      boxShadow: theme.shadow.s400,
      outline: 0,
      position: "fixed",
      right: 0,
      top: 0,
      transition: "transform 150ms " + easing$1,
      width: DRAWER_WIDTHS[width],
      zIndex: theme.elevation.e400,
      display: "flex",
      flexDirection: "column"
    }
  }, props), core.jsx(DrawerControllerContextProvider, {
    value: null
  }, children))))));
};

function getDialogTransition(depth) {
  return {
    entering: {
      transform: "translateX(100%)"
    },
    entered: {
      transform: `scale(${1 - .05 * depth}) translateX(-${40 * depth}px)`
    },
    exiting: {
      transform: "translateX(100%)"
    },
    exited: {
      transform: "translateX(100%)"
    }
  };
}

const Drawer = ({actions: actions, children: children, title: title, id: id, initialFocusRef: initialFocusRef, width: width = "narrow"}) => {
  const transitionState = useDrawerControllerContext(), {cancel: cancel, confirm: confirm} = actions, {colors: colors, spacing: spacing} = core.useTheme(), safeClose = actions.confirm.loading ? () => {} : actions.cancel.action, instanceId = core.useId(id), headingId = core.makeId(instanceId, "heading");
  return core.jsx(DrawerBase, {
    transitionState: transitionState,
    "aria-labelledby": headingId,
    initialFocusRef: initialFocusRef,
    onSubmit: actions.confirm.action,
    onClose: safeClose,
    width: width
  }, core.jsx("div", {
    css: {
      alignItems: "center",
      borderBottom: "1px solid " + colors.border,
      boxSizing: "border-box",
      display: "flex",
      flexShrink: 0,
      height: 80,
      padding: `${spacing.large}px ${spacing.xlarge}px`
    }
  }, core.jsx(core.Heading, {
    id: headingId,
    type: "h3"
  }, title)), core.jsx("div", {
    css: {
      overflowY: "auto",
      padding: `0 ${spacing.xlarge}px`
    }
  }, children), core.jsx(core.Divider, {
    marginX: "xlarge"
  }), core.jsx(core.Stack, {
    padding: "xlarge",
    across: !0,
    gap: "small"
  }, core.jsx(button.Button, {
    tone: "active",
    weight: "bold",
    type: "submit",
    isLoading: confirm.loading
  }, confirm.label), core.jsx(button.Button, {
    onClick: safeClose,
    disabled: confirm.loading,
    weight: "none",
    tone: "passive"
  }, cancel.label)));
}, slideInAnim = core.keyframes({
  from: {
    transform: "translateY(20%)",
    opacity: 0
  }
}), easing$2 = "cubic-bezier(0.2, 0, 0, 1)", DialogBase = _ref => {
  let {children: children, isOpen: isOpen, onClose: onClose, width: width} = _ref, props = _objectWithoutProperties__default.default(_ref, [ "children", "isOpen", "onClose", "width" ]);
  const theme = core.useTheme();
  return isOpen ? core.jsx(core.Portal, null, core.jsx(React.Fragment, null, core.jsx(Blanket, {
    onClick: onClose
  }), core.jsx(FocusLock__default.default, {
    autoFocus: !0,
    returnFocus: !0
  }, core.jsx(reactRemoveScroll.RemoveScroll, {
    enabled: !0
  }, core.jsx("div", _extends__default.default({
    "aria-modal": "true",
    role: "dialog",
    tabIndex: -1,
    onKeyDown: event => {
      "Escape" !== event.key || event.defaultPrevented || (event.preventDefault(), onClose());
    },
    css: {
      animation: `${slideInAnim} 320ms ${easing$2}`,
      backgroundColor: theme.colors.background,
      borderRadius: theme.radii.large,
      boxShadow: theme.shadow.s400,
      margin: theme.spacing.small,
      position: "fixed",
      marginLeft: -width / 2,
      left: "50%",
      top: 64,
      transition: "transform 150ms " + easing$2,
      width: width,
      zIndex: theme.elevation.e400
    }
  }, props), children))))) : null;
}, AlertDialog = ({actions: actions, isOpen: isOpen, children: children, title: title, id: id, tone: tone = "active"}) => {
  const {cancel: cancel, confirm: confirm} = actions, theme = core.useTheme(), instanceId = core.useId(id), headingId = core.makeId("heading", instanceId);
  return core.jsx(DialogBase, {
    isOpen: isOpen,
    onClose: () => {
      actions.cancel ? actions.cancel.action() : actions.confirm.action();
    },
    width: 440,
    "aria-labelledby": headingId
  }, core.jsx("div", {
    css: {
      padding: theme.spacing.xlarge
    }
  }, core.jsx(core.Heading, {
    id: headingId,
    type: "h4"
  }, title), core.jsx(core.Box, {
    marginY: "large"
  }, children), core.jsx("div", {
    css: {
      display: "flex",
      justifyContent: "flex-end"
    }
  }, cancel && core.jsx(button.Button, {
    disabled: confirm.loading,
    key: cancel.label,
    onClick: cancel.action,
    weight: "none",
    tone: "passive"
  }, cancel.label), core.jsx(button.Button, {
    css: {
      marginLeft: theme.spacing.medium
    },
    key: confirm.label,
    isLoading: confirm.loading,
    onClick: confirm.action,
    tone: tone
  }, confirm.label))));
};

exports.AlertDialog = AlertDialog, exports.DRAWER_WIDTHS = DRAWER_WIDTHS, exports.Drawer = Drawer, 
exports.DrawerController = DrawerController, exports.DrawerProvider = DrawerProvider;
