import { ComponentPropsWithoutRef, ElementType, ReactElement, ReactNode, Ref, useLayoutEffect } from 'react';
export declare function identityType<T>(): <U extends T>(u: U) => U;
export declare const devWarning: (condition: boolean, message: string) => void;
declare type ElementTagNameMap = HTMLElementTagNameMap & Pick<SVGElementTagNameMap, Exclude<keyof SVGElementTagNameMap, keyof HTMLElementTagNameMap>>;
declare type AsProp<Comp extends ElementType, Props> = {
    as?: Comp;
    ref?: Ref<Comp extends keyof ElementTagNameMap ? ElementTagNameMap[Comp] : Comp extends new (...args: any) => any ? InstanceType<Comp> : undefined>;
} & Omit<ComponentPropsWithoutRef<Comp>, 'as' | keyof Props>;
declare type CompWithAsProp<Props, DefaultElementType extends ElementType> = <Comp extends ElementType = DefaultElementType>(props: AsProp<Comp, Props> & Props) => ReactElement;
export declare const forwardRefWithAs: <DefaultElementType extends ElementType<any>, BaseProps>(render: (props: BaseProps & {
    as?: "symbol" | "object" | "form" | "slot" | "style" | "title" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "base" | "bdi" | "bdo" | "big" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "keygen" | "label" | "legend" | "li" | "link" | "main" | "map" | "mark" | "menu" | "menuitem" | "meta" | "meter" | "nav" | "noindex" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "progress" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "small" | "source" | "span" | "strong" | "sub" | "summary" | "sup" | "table" | "template" | "tbody" | "td" | "textarea" | "tfoot" | "th" | "thead" | "time" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr" | "webview" | "svg" | "animate" | "animateMotion" | "animateTransform" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feDropShadow" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "mpath" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "switch" | "text" | "textPath" | "tspan" | "use" | "view" | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | undefined;
}, ref: React.Ref<any>) => Exclude<ReactNode, undefined>) => CompWithAsProp<BaseProps, DefaultElementType>;
export declare function makeId(...args: (string | number | null | undefined)[]): string;
export declare const mapResponsiveProp: <Map_1 extends Record<string, import("react").ReactText>, Keys extends keyof Map_1>(value: Keys | readonly (Keys | null)[], valueMap: Map_1) => Map_1[Keys] | (Map_1[Keys] | null)[];
export declare const useId: (idFromProps?: string | null | undefined) => string | undefined;
export declare const useSafeLayoutEffect: typeof useLayoutEffect;
declare type Props = {
    children: ReactElement;
};
export declare const Portal: ({ children }: Props) => import("react").ReactPortal | null;
export {};
