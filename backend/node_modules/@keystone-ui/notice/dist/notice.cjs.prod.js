"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = require("@babel/runtime/helpers/extends"), _objectWithoutProperties = require("@babel/runtime/helpers/objectWithoutProperties"), react = require("react"), core = require("@keystone-ui/core"), AlertOctagonIcon = require("@keystone-ui/icons/icons/AlertOctagonIcon"), AlertCircleIcon = require("@keystone-ui/icons/icons/AlertCircleIcon"), AlertTriangleIcon = require("@keystone-ui/icons/icons/AlertTriangleIcon"), CheckCircleIcon = require("@keystone-ui/icons/icons/CheckCircleIcon"), InfoIcon = require("@keystone-ui/icons/icons/InfoIcon"), HelpCircleIcon = require("@keystone-ui/icons/icons/HelpCircleIcon"), button = require("@keystone-ui/button");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _extends__default = _interopDefault(_extends), _objectWithoutProperties__default = _interopDefault(_objectWithoutProperties);

function _defineProperty(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value: value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const noticeToneValues = [ "active", "passive", "positive", "warning", "negative", "help" ];

function useNoticeTokens({tone: toneKey}) {
  const {colors: colors, radii: radii, tones: tones, typography: typography, spacing: spacing} = core.useTheme(), tone = tones[toneKey];
  return {
    background: tone.tint[0],
    borderColor: tone.border[0],
    borderRadius: radii.medium,
    borderWidth: 1,
    fontSize: typography.fontSize.small,
    fontWeight: typography.fontWeight.medium,
    foreground: colors.foregroundDim,
    gap: spacing.medium,
    iconColor: tone.foreground[0],
    paddingX: spacing.large,
    paddingY: spacing.large,
    title: {
      foreground: colors.foreground,
      fontSize: typography.fontSize.medium,
      fontWeight: typography.fontWeight.medium
    }
  };
}

function useNoticeStyles({tokens: tokens}) {
  return {
    actions: {
      marginTop: tokens.gap
    },
    box: {
      backgroundColor: tokens.background,
      borderColor: tokens.borderColor || "transparent",
      borderRadius: tokens.borderRadius,
      borderWidth: tokens.borderWidth,
      color: tokens.foreground,
      fontSize: tokens.fontSize,
      fontWeight: tokens.fontWeight,
      paddingLeft: tokens.paddingX,
      paddingRight: tokens.paddingX,
      paddingTop: tokens.paddingY,
      paddingBottom: tokens.paddingY
    },
    title: {
      color: tokens.title.foreground,
      fontSize: tokens.title.fontSize,
      fontWeight: tokens.title.fontWeight,
      marginBottom: tokens.gap / 2
    },
    symbol: {
      color: tokens.iconColor,
      marginRight: tokens.gap
    }
  };
}

function useButtonTokens({tone: toneKey, size: sizeKey, weight: weightKey}) {
  const {animation: animation, colors: colors, tones: tones, typography: typography, controlSizes: controlSizes, opacity: opacity} = core.useTheme(), tone = tones[toneKey], size = controlSizes[sizeKey], weight = {
    bold: {
      background: "white",
      borderColor: tone.border[0],
      foreground: colors.foreground,
      focus: {
        shadow: "0 0 0 2px " + tone.focusRing
      },
      hover: {
        foreground: tone.foreground[1],
        background: tone.tint[1]
      },
      pressed: {
        foreground: tone.foreground[2],
        background: tone.tint[2]
      }
    },
    light: {
      background: tone.tint[0],
      foreground: colors.foreground,
      focus: {
        shadow: "0 0 0 2px " + tone.focusRing
      },
      hover: {
        foreground: tone.foreground[1],
        background: tone.tint[1]
      },
      pressed: {
        foreground: tone.foreground[2],
        background: tone.tint[2]
      }
    },
    none: {
      foreground: colors.foreground,
      focus: {
        shadow: "0 0 0 2px " + tone.focusRing
      },
      hover: {
        foreground: tone.foreground[0],
        background: tone.tint[0]
      },
      pressed: {
        foreground: tone.foreground[1],
        background: tone.tint[1]
      }
    },
    link: {
      foreground: colors.foreground,
      focus: {
        textDecoration: "underline"
      },
      hover: {
        foreground: tone.foreground[0],
        textDecoration: "underline"
      },
      pressed: {
        foreground: tone.foreground[1],
        textDecoration: "underline"
      }
    }
  }[weightKey];
  return _objectSpread2({
    borderRadius: size.borderRadius,
    borderWidth: size.borderWidth,
    disabledOpacity: opacity.disabled,
    fontSize: size.fontSize,
    fontWeight: typography.fontWeight.semibold,
    height: size.height,
    paddingX: size.paddingX,
    transition: `\n      background-color ${animation.duration100},\n      box-shadow ${animation.duration100},\n      border-color ${animation.duration100},\n      opacity ${animation.duration100},\n    `
  }, weight);
}

const symbols = {
  active: core.jsx(InfoIcon.InfoIcon, null),
  passive: core.jsx(AlertCircleIcon.AlertCircleIcon, null),
  positive: core.jsx(CheckCircleIcon.CheckCircleIcon, null),
  warning: core.jsx(AlertTriangleIcon.AlertTriangleIcon, null),
  negative: core.jsx(AlertOctagonIcon.AlertOctagonIcon, null),
  help: core.jsx(HelpCircleIcon.HelpCircleIcon, null)
}, Notice = _ref => {
  let {actions: actions, children: children, tone: tone = "passive", title: title} = _ref, otherProps = _objectWithoutProperties__default.default(_ref, [ "actions", "children", "tone", "title" ]);
  const id = core.useId(), titleId = core.makeId("notice-title", id), contentId = core.makeId("notice-content", id), styles = useNoticeStyles({
    tokens: useNoticeTokens({
      tone: tone
    })
  }), buttonContext = react.useMemo((() => ({
    hooks: {
      useButtonTokens: useButtonTokens
    },
    defaults: {
      tone: tone,
      size: "small"
    }
  })), [ tone ]);
  return core.jsx(button.ButtonProvider, buttonContext, core.jsx("div", _extends__default.default({
    css: _objectSpread2({
      display: "flex",
      flex: 1,
      flexDirection: "row",
      outline: 0
    }, styles.box),
    tabIndex: 0,
    role: "alert",
    "aria-live": "polite",
    "aria-labelledby": titleId,
    "aria-describedby": contentId
  }, otherProps), core.jsx("div", {
    css: styles.symbol
  }, symbols[tone]), core.jsx("div", {
    css: {
      flex: 1
    }
  }, title && core.jsx("div", {
    id: titleId,
    css: _objectSpread2({
      marginTop: 1
    }, styles.title)
  }, title), core.jsx("div", {
    id: contentId,
    css: {
      marginTop: 2
    }
  }, children), actions && core.jsx(core.Stack, {
    across: !0,
    gap: "small",
    css: styles.actions
  }, actions.primary && core.jsx(button.Button, {
    weight: "bold"
  }, actions.primary.label), actions.secondary && core.jsx(button.Button, {
    weight: "light"
  }, actions.secondary.label)))));
};

exports.Notice = Notice, exports.noticeToneValues = noticeToneValues, exports.useNoticeStyles = useNoticeStyles, 
exports.useNoticeTokens = useNoticeTokens;
