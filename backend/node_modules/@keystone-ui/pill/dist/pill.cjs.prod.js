"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = require("@babel/runtime/helpers/extends"), _objectWithoutProperties = require("@babel/runtime/helpers/objectWithoutProperties"), core = require("@keystone-ui/core"), react = require("react"), XIcon = require("@keystone-ui/icons/icons/XIcon");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _extends__default = _interopDefault(_extends), _objectWithoutProperties__default = _interopDefault(_objectWithoutProperties);

function _defineProperty(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value: value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const PillButton = _ref => {
  let {tone: toneKey, weight: weight, onClick: onClick, tabIndex: tabIndex} = _ref, props = _objectWithoutProperties__default.default(_ref, [ "tone", "weight", "onClick", "tabIndex" ]);
  const {radii: radii, spacing: spacing, tones: tones, typography: typography} = core.useTheme(), isInteractive = !!onClick, tone = tones[toneKey], tokens = {
    bold: {
      background: tone.fill[0],
      foreground: tone.fillForeground[0],
      focus: {
        shadow: "0 0 0 2px " + tone.focusRing
      },
      hover: {
        background: tone.fill[1]
      },
      active: {
        background: tone.fill[2]
      }
    },
    light: {
      background: tone.tint[0],
      foreground: tone.foreground[0],
      focus: {
        shadow: "0 0 0 2px " + tone.focusRing
      },
      hover: {
        foreground: tone.foreground[1],
        background: tone.tint[1]
      },
      active: {
        foreground: tone.foreground[2],
        background: tone.tint[2]
      }
    }
  }[weight], baseStyles = {
    alignItems: "center",
    appearance: "none",
    background: "none",
    backgroundColor: tokens.background,
    border: 0,
    color: tokens.foreground,
    display: "flex",
    fontSize: typography.fontSize.small,
    fontWeight: typography.fontWeight.medium,
    justifyContent: "center",
    maxWidth: "100%",
    minWidth: 1,
    outline: 0,
    padding: `${spacing.small}px ${spacing.medium}px`,
    ":first-of-type": {
      paddingRight: spacing.small,
      borderTopLeftRadius: radii.full,
      borderBottomLeftRadius: radii.full,
      marginRight: 1
    },
    ":last-of-type": {
      paddingLeft: spacing.small,
      borderTopRightRadius: radii.full,
      borderBottomRightRadius: radii.full
    },
    ":only-of-type": {
      paddingLeft: spacing.medium,
      paddingRight: spacing.medium
    }
  }, interactiveStyles = isInteractive ? {
    cursor: "pointer",
    ":focus": {
      boxShadow: tokens.focus.shadow
    },
    ":hover,:focus": {
      backgroundColor: tokens.hover.background,
      color: tokens.hover.foreground
    },
    ":active": {
      backgroundColor: tokens.active.background,
      color: tokens.active.foreground
    }
  } : {};
  return core.jsx("button", _extends__default.default({
    css: _objectSpread2(_objectSpread2({}, baseStyles), interactiveStyles),
    onClick: onClick,
    tabIndex: isInteractive ? tabIndex : -1
  }, props));
}, Pill = react.forwardRef(((_ref2, ref) => {
  let {weight: weight = "bold", tone: tone = "active", children: children, onClick: onClick, onRemove: onRemove} = _ref2, props = _objectWithoutProperties__default.default(_ref2, [ "weight", "tone", "children", "onClick", "onRemove" ]);
  return console.log(onClick), core.jsx("div", _extends__default.default({
    css: {
      display: "flex"
    }
  }, props, {
    ref: ref
  }), core.jsx(PillButton, {
    weight: weight,
    tone: tone,
    onClick: onClick
  }, children), onRemove ? core.jsx(PillButton, {
    weight: weight,
    tone: tone,
    onClick: onRemove
  }, core.jsx(XIcon.XIcon, {
    css: {
      height: 14,
      width: 14
    }
  })) : null);
}));

exports.Pill = Pill;
