'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _extends = require('@babel/runtime/helpers/extends');
var core = require('@keystone-ui/core');
var fields = require('@keystone-ui/fields');
var CheckIcon = require('@keystone-ui/icons/icons/CheckIcon');
var react = require('react');
var ReactSelect = require('react-select');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var ReactSelect__default = /*#__PURE__*/_interopDefault(ReactSelect);

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

const CheckMark = ({
  isDisabled,
  isFocused,
  isSelected
}) => {
  const tokens = fields.useIndicatorTokens({
    size: 'medium',
    type: 'radio'
  });
  return core.jsx("div", {
    className: `${isDisabled ? 'disabled ' : ''}${isFocused ? 'focus ' : ''}${isSelected ? 'selected' : ''}`,
    css: {
      alignItems: 'center',
      backgroundColor: tokens.background,
      borderColor: tokens.borderColor,
      borderRadius: tokens.borderRadius,
      borderStyle: 'solid',
      borderWidth: tokens.borderWidth,
      boxSizing: 'border-box',
      color: tokens.foreground,
      cursor: 'pointer',
      display: 'flex',
      flexShrink: 0,
      height: tokens.boxSize,
      justifyContent: 'center',
      transition: tokens.transition,
      width: tokens.boxSize,
      '&.focus': {
        backgroundColor: tokens.focus.background,
        borderColor: tokens.focus.borderColor,
        boxShadow: tokens.focus.shadow,
        color: tokens.focus.foreground
      },
      '&.selected': {
        backgroundColor: tokens.selected.background,
        borderColor: tokens.selected.borderColor,
        boxShadow: tokens.selected.shadow,
        color: tokens.selected.foreground
      },
      '&.disabled': {
        backgroundColor: tokens.disabled.background,
        borderColor: tokens.disabled.borderColor,
        boxShadow: tokens.disabled.shadow,
        color: tokens.disabled.background,
        cursor: 'default'
      },
      '&.selected.disabled': {
        color: tokens.disabled.foreground
      }
    }
  }, core.jsx(CheckIcon.CheckIcon, {
    size: "small"
  }));
};
const OptionPrimitive = ({
  children,
  isDisabled,
  innerProps,
  innerRef,
  className
}) => {
  const theme = core.useTheme();
  return core.jsx("div", _extends__default['default']({
    ref: innerRef,
    className: className,
    css: {
      alignItems: 'center',
      color: isDisabled ? theme.colors.foregroundDim : undefined,
      cursor: 'pointer',
      display: 'flex',
      fontSize: '0.9em',
      fontWeight: 500,
      justifyContent: 'space-between',
      outline: 0,
      padding: `${theme.spacing.small}px 0`,
      pointerEvents: isDisabled ? 'none' : undefined,
      '&:not(:first-of-type)': {
        borderTop: `1px solid ${theme.colors.backgroundDim}`
      }
    }
  }, innerProps), children);
};

const Control = (_ref) => {
  let {
    selectProps
  } = _ref,
      props = _objectWithoutProperties__default['default'](_ref, ["selectProps"]);

  return selectProps.shouldDisplaySearchControl ? core.jsx(ReactSelect.components.Control, _extends__default['default']({
    selectProps: selectProps
  }, props)) : core.jsx("div", {
    css: {
      border: 0,
      clip: 'rect(1px, 1px, 1px, 1px)',
      height: 1,
      overflow: 'hidden',
      padding: 0,
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: 1
    }
  }, core.jsx(ReactSelect.components.Control, _extends__default['default']({
    selectProps: selectProps
  }, props)));
};

const defaultComponents = {
  Control,
  Option: OptionPrimitive,
  DropdownIndicator: null,
  IndicatorSeparator: null
};
const Options = (_ref2) => {
  let {
    components: propComponents
  } = _ref2,
      props = _objectWithoutProperties__default['default'](_ref2, ["components"]);

  const components = react.useMemo(() => _objectSpread2(_objectSpread2({}, defaultComponents), propComponents), [propComponents]);
  const displaySearch = true;
  const theme = core.useTheme();
  const optionRendererStyles = react.useMemo(() => ({
    control: provided => _objectSpread2(_objectSpread2({}, provided), {}, {
      background: theme.fields.inputBackground,
      boxShadow: 'none',
      cursor: 'text',
      padding: 0,
      minHeight: 34
    }),
    menu: () => ({
      marginTop: 8
    }),
    menuList: provided => _objectSpread2(_objectSpread2({}, provided), {}, {
      padding: 0
    }),
    placeholder: provided => _objectSpread2(_objectSpread2({}, provided), {}, {
      color: theme.fields.inputPlaceholder
    })
  }), [theme]);
  return core.jsx(ReactSelect__default['default'], _extends__default['default']({
    backspaceRemovesValue: false,
    captureMenuScroll: false,
    closeMenuOnSelect: false,
    controlShouldRenderValue: false,
    hideSelectedOptions: false,
    isClearable: false,
    isSearchable: displaySearch,
    maxMenuHeight: 1000,
    menuIsOpen: true,
    menuShouldScrollIntoView: false,
    shouldDisplaySearchControl: displaySearch,
    styles: optionRendererStyles // TODO: JW: Not a fan of this, but it doesn't seem to make a difference
    // if we take it out. react-select bug maybe?
    ,
    tabSelectsValue: false,
    components: components
  }, props));
};

exports.CheckMark = CheckMark;
exports.OptionPrimitive = OptionPrimitive;
exports.Options = Options;
