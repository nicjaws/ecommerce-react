"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = require("@babel/runtime/helpers/extends"), _objectWithoutProperties = require("@babel/runtime/helpers/objectWithoutProperties"), React = require("react"), core = require("@keystone-ui/core"), loading = require("@keystone-ui/loading");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _extends__default = _interopDefault(_extends), _objectWithoutProperties__default = _interopDefault(_objectWithoutProperties), React__default = _interopDefault(React);

function _defineProperty(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value: value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const buttonSizeValues = [ "large", "medium", "small" ], buttonToneValues = [ "active", "passive", "positive", "warning", "negative", "help" ], buttonWeightValues = [ "bold", "light", "none", "link" ], buttonPropDefaults = {
  size: "medium",
  tone: "passive",
  weight: "light"
};

function useButtonTokens({tone: toneKey, size: sizeKey, weight: weightKey}) {
  const {animation: animation, colors: colors, tones: tones, typography: typography, controlSizes: controlSizes, opacity: opacity} = core.useTheme(), tone = tones[toneKey], size = controlSizes[sizeKey], weight = {
    bold: {
      background: tone.fill[0],
      foreground: tone.fillForeground[0],
      focus: {
        shadow: "0 0 0 2px " + tone.focusRing
      },
      hover: {
        background: tone.fill[1]
      },
      pressed: {
        background: tone.fill[2]
      }
    },
    light: {
      background: tone.tint[0],
      foreground: tone.foreground[0],
      focus: {
        shadow: "0 0 0 2px " + tone.focusRing
      },
      hover: {
        foreground: tone.foreground[1],
        background: tone.tint[1]
      },
      pressed: {
        foreground: tone.foreground[2],
        background: tone.tint[2]
      }
    },
    none: {
      foreground: tone.foreground[0],
      focus: {
        shadow: "0 0 0 2px " + tone.focusRing
      },
      hover: {
        foreground: tone.foreground[1],
        background: tone.tint[0]
      },
      pressed: {
        foreground: tone.foreground[2],
        background: tone.tint[1]
      }
    },
    link: {
      foreground: colors.foreground,
      textDecoration: "none",
      focus: {
        textDecoration: "underline"
      },
      hover: {
        foreground: tone.foreground[0],
        textDecoration: "underline"
      },
      pressed: {
        foreground: tone.foreground[1],
        textDecoration: "underline"
      }
    }
  }[weightKey];
  return _objectSpread2({
    borderRadius: size.borderRadius,
    borderWidth: size.borderWidth,
    disabledOpacity: opacity.disabled,
    fontSize: size.fontSize,
    fontWeight: typography.fontWeight.medium,
    height: size.height,
    paddingX: size.paddingX,
    transition: `\n      background-color ${animation.duration100},\n      box-shadow ${animation.duration100},\n      border-color ${animation.duration100},\n      opacity ${animation.duration100},\n    `
  }, weight);
}

function useButtonStyles({isDisabled: isDisabled, isBlock: isBlock, tokens: tokens}) {
  const baseStyles = {
    alignItems: "center",
    borderStyle: "solid",
    boxSizing: "border-box",
    cursor: isDisabled ? "default" : "pointer",
    display: isBlock ? "flex" : "inline-flex",
    flexShrink: 0,
    justifyContent: "center",
    opacity: isDisabled ? tokens.disabledOpacity : void 0,
    outline: 0,
    pointerEvents: isDisabled ? "none" : void 0,
    position: "relative",
    textDecoration: "none",
    userSelect: "none",
    whiteSpace: "nowrap",
    width: isBlock ? "100%" : void 0
  }, tokenStyles = {
    backgroundColor: tokens.background || "transparent",
    borderColor: tokens.borderColor || "transparent",
    borderRadius: tokens.borderRadius,
    borderWidth: tokens.borderWidth,
    color: tokens.foreground,
    fontSize: tokens.fontSize,
    fontWeight: tokens.fontWeight,
    height: tokens.height,
    paddingLeft: tokens.paddingX,
    paddingRight: tokens.paddingX,
    textDecoration: tokens.textDecoration,
    transition: tokens.transition,
    ":focus": {
      background: tokens.focus.background,
      borderColor: tokens.focus.borderColor,
      boxShadow: tokens.focus.shadow,
      color: tokens.focus.foreground,
      textDecoration: tokens.focus.textDecoration
    },
    ":hover": {
      background: tokens.hover.background,
      borderColor: tokens.hover.borderColor,
      boxShadow: tokens.hover.shadow,
      color: tokens.hover.foreground,
      textDecoration: tokens.hover.textDecoration
    },
    ":active": {
      background: tokens.pressed.background,
      borderColor: tokens.pressed.borderColor,
      boxShadow: tokens.pressed.shadow,
      color: tokens.pressed.foreground,
      textDecoration: tokens.pressed.textDecoration
    }
  };
  return _objectSpread2(_objectSpread2({}, baseStyles), tokenStyles);
}

const ButtonContext = React.createContext({
  defaults: buttonPropDefaults,
  useButtonStyles: useButtonStyles,
  useButtonTokens: useButtonTokens
}), ButtonProvider = ({defaults: defaults, hooks: hooks, children: children}) => {
  const parentContext = React.useContext(ButtonContext), newContext = React.useMemo((() => _objectSpread2(_objectSpread2(_objectSpread2({}, parentContext), hooks), {}, {
    defaults: _objectSpread2(_objectSpread2({}, parentContext.defaults), defaults)
  })), [ parentContext, hooks, defaults ]);
  return React__default.default.createElement(ButtonContext.Provider, {
    value: newContext
  }, children);
}, loadingContainerStyles = {
  left: "50%",
  position: "absolute",
  transform: "translateX(-50%)"
}, Button = core.forwardRefWithAs(((_ref, ref) => {
  let {as: Tag = "button", children: children, isDisabled: isDisabled, isLoading: isLoading, size: size, tone: tone, weight: weight} = _ref, otherProps = _objectWithoutProperties__default.default(_ref, [ "as", "children", "isDisabled", "isLoading", "size", "tone", "weight" ]);
  const {useButtonStyles: useButtonStyles, useButtonTokens: useButtonTokens, defaults: defaults} = React.useContext(ButtonContext), styles = useButtonStyles({
    isDisabled: isDisabled,
    tokens: useButtonTokens({
      size: size || defaults.size,
      tone: tone || defaults.tone,
      weight: weight || defaults.weight
    })
  });
  return core.jsx(Tag, _extends__default.default({
    type: "button" === Tag ? "button" : void 0,
    css: styles,
    ref: ref
  }, otherProps), core.jsx("span", {
    css: isLoading ? {
      opacity: 0
    } : null
  }, children), isLoading && core.jsx("span", {
    css: loadingContainerStyles
  }, core.jsx(loading.LoadingDots, {
    size: size || defaults.size,
    label: "Button loading indicator"
  })));
}));

exports.Button = Button, exports.ButtonContext = ButtonContext, exports.ButtonProvider = ButtonProvider, 
exports.buttonPropDefaults = buttonPropDefaults, exports.buttonSizeValues = buttonSizeValues, 
exports.buttonToneValues = buttonToneValues, exports.buttonWeightValues = buttonWeightValues, 
exports.useButtonStyles = useButtonStyles, exports.useButtonTokens = useButtonTokens;
