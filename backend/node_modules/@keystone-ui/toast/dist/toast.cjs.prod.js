"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _objectWithoutProperties = require("@babel/runtime/helpers/objectWithoutProperties"), _extends = require("@babel/runtime/helpers/extends"), react = require("react"), core = require("@keystone-ui/core"), AlertOctagonIcon = require("@keystone-ui/icons/icons/AlertOctagonIcon"), AlertTriangleIcon = require("@keystone-ui/icons/icons/AlertTriangleIcon"), CheckCircleIcon = require("@keystone-ui/icons/icons/CheckCircleIcon"), InfoIcon = require("@keystone-ui/icons/icons/InfoIcon"), XIcon = require("@keystone-ui/icons/icons/XIcon");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _objectWithoutProperties__default = _interopDefault(_objectWithoutProperties), _extends__default = _interopDefault(_extends);

function notInContext() {
  throw new Error("This component must be used inside a <ToastProvider> component.");
}

const ToastContext = react.createContext({
  addToast: notInContext,
  removeToast: notInContext
}), useToasts = () => react.useContext(ToastContext), ToastProvider = ({children: children}) => {
  const [toastStack, setToastStack] = react.useState([]), context = react.useMemo((() => ({
    addToast: options => {
      setToastStack((currentStack => {
        if (currentStack.some((toast => toast.id === options.id))) return console.error(`You cannot add more than one toast with the same id ("${options.id}").`), 
        currentStack;
        let toast = populateDefaults(options);
        return [ ...currentStack, toast ];
      }));
    },
    removeToast: id => {
      setToastStack((currentStack => currentStack.filter((t => t.id !== id))));
    }
  })), []);
  return core.jsx(ToastContext.Provider, {
    value: context
  }, children, core.jsx(ToastContainer, null, toastStack.map((props => {
    const {id: id, message: message, preserve: preserve, title: title, tone: tone} = props;
    return core.jsx(ToastElement, {
      key: id,
      message: message,
      preserve: preserve,
      onDismiss: () => context.removeToast(id),
      title: title,
      tone: tone
    });
  }))));
};

let idCount = -1, genId = () => ++idCount;

function populateDefaults(props) {
  return {
    title: props.title,
    message: props.message,
    preserve: Boolean(props.preserve),
    id: props.id || String(genId()),
    tone: props.tone || "help"
  };
}

const ToastContainer = props => {
  const {elevation: elevation, spacing: spacing} = core.useTheme();
  return core.jsx(core.Portal, null, core.jsx("div", _extends__default.default({
    css: {
      position: "fixed",
      right: spacing.medium,
      bottom: spacing.medium,
      zIndex: elevation.e500
    }
  }, props)));
}, AUTO_DISMISS_DURATION = 6e3, slideInFrames = core.keyframes({
  from: {
    transform: "translateY(100%)"
  },
  to: {
    transform: "translateY(0)"
  }
}), ToastElement = react.forwardRef(((props, ref) => {
  const {message: message, onDismiss: onDismiss, preserve: preserve, title: title, tone: tone} = props, rest = _objectWithoutProperties__default.default(props, [ "message", "onDismiss", "preserve", "title", "tone" ]), {radii: radii, shadow: shadow, spacing: spacing, typography: typography, sizing: sizing, tones: tones} = core.useTheme();
  react.useEffect((() => {
    if (!preserve) {
      const timer = setTimeout(onDismiss, 6e3);
      return () => clearTimeout(timer);
    }
  }), []);
  const iconElement = {
    positive: core.jsx(CheckCircleIcon.CheckCircleIcon, null),
    negative: core.jsx(AlertOctagonIcon.AlertOctagonIcon, null),
    warning: core.jsx(AlertTriangleIcon.AlertTriangleIcon, null),
    help: core.jsx(InfoIcon.InfoIcon, null)
  }[tone], backgroundColor = {
    positive: tones.positive.fill[0],
    negative: tones.negative.fill[0],
    warning: tones.warning.fill[0],
    help: tones.help.fill[0]
  }[tone], foregroundColor = {
    positive: tones.positive.fillForeground[0],
    negative: tones.negative.fillForeground[0],
    warning: tones.warning.fillForeground[0],
    help: tones.help.fillForeground[0]
  }[tone];
  return core.jsx("div", _extends__default.default({
    ref: ref,
    css: {
      alignItems: "center",
      animation: slideInFrames + " 150ms cubic-bezier(0.2, 0, 0, 1)",
      background: backgroundColor,
      borderRadius: radii.medium,
      boxShadow: shadow.s300,
      color: foregroundColor,
      display: "flex",
      fontSize: typography.fontSize.small,
      lineHeight: 1,
      margin: spacing.medium,
      width: 380,
      maxWidth: "100%",
      padding: spacing.large
    }
  }, rest), iconElement, core.jsx("div", {
    css: {
      flex: 1,
      paddingLeft: spacing.large,
      paddingRight: spacing.large
    }
  }, core.jsx("h3", {
    css: {
      color: foregroundColor,
      fontSize: typography.fontSize.medium,
      fontWeight: typography.fontWeight.bold,
      margin: 0
    }
  }, title), message && core.jsx("div", {
    css: {
      color: foregroundColor,
      lineHeight: typography.leading.base,
      marginTop: spacing.small
    }
  }, message)), core.jsx("button", {
    onClick: onDismiss,
    css: {
      alignItems: "center",
      background: 0,
      border: 0,
      borderRadius: "50%",
      color: foregroundColor,
      cursor: "pointer",
      display: "flex",
      height: sizing.medium,
      justifyContent: "center",
      outline: 0,
      padding: 0,
      width: sizing.medium,
      ":hover, &.focus-visible": {
        backgroundColor: "rgba(0, 0, 0, 0.1)"
      },
      ":active": {
        backgroundColor: "rgba(0, 0, 0, 0.2)"
      }
    }
  }, core.jsx(XIcon.XIcon, {
    size: "small"
  })));
}));

exports.ToastProvider = ToastProvider, exports.useToasts = useToasts;
