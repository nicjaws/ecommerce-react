'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var core = require('@keystone-ui/core');
var button = require('@keystone-ui/button');
var context = require('@keystone-next/admin-ui/context');
var isDeepEqual = require('fast-deep-equal');
var SigninContainer = require('../../../dist/SigninContainer-9f2efe66.cjs.dev.js');
var apollo = require('@keystone-next/admin-ui/apollo');
var router = require('@keystone-next/admin-ui/router');
var components = require('@keystone-next/admin-ui/components');
var adminUiUtils = require('@keystone-next/admin-ui-utils');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var isDeepEqual__default = /*#__PURE__*/_interopDefault(isDeepEqual);

/* @jsx jsx */
const InitPage = ({
  fieldPaths,
  listKey
}) => {
  var _data$authenticate;

  const {
    adminMeta
  } = context.useKeystone();
  const fields = react.useMemo(() => {
    const fields = {};
    fieldPaths.forEach(fieldPath => {
      fields[fieldPath] = adminMeta.lists[listKey].fields[fieldPath];
    });
    return fields;
  }, [fieldPaths]);
  const [value, setValue] = react.useState(() => {
    let state = {};
    Object.keys(fields).forEach(fieldPath => {
      state[fieldPath] = {
        kind: 'value',
        value: fields[fieldPath].controller.defaultValue
      };
    });
    return state;
  });
  const invalidFields = adminUiUtils.useInvalidFields(fields, value);
  const [forceValidation, setForceValidation] = react.useState(false);
  const [createFirstItem, {
    loading,
    error,
    data
  }] = apollo.useMutation(apollo.gql`mutation($data: CreateInitial${listKey}Input!) {
    authenticate: createInitial${listKey}(data: $data) {
      ... on ${listKey}AuthenticationWithPasswordSuccess {
        item {
          id
        }
      }
    }
  }`);
  const reinitContext = context.useReinitContext();
  const router$1 = router.useRouter();
  const rawKeystone = context.useRawKeystone();
  react.useEffect(() => {
    if (rawKeystone.authenticatedItem.state === 'authenticated') {
      router$1.push(router$1.query.from || '/');
    }
  }, [rawKeystone.authenticatedItem, router$1.query.from]);
  return core.jsx(SigninContainer.SigninContainer, null, core.jsx(core.H1, null, "Welcome to KeystoneJS"), core.jsx("p", null, "Get Started by creating the first user:"), core.jsx("form", {
    onSubmit: event => {
      event.preventDefault();
      const newForceValidation = invalidFields.size !== 0;
      setForceValidation(newForceValidation);
      if (newForceValidation) return;
      const data = {};
      const allSerializedValues = adminUiUtils.serializeValueToObjByFieldKey(fields, value);
      Object.keys(allSerializedValues).forEach(fieldPath => {
        const {
          controller
        } = fields[fieldPath];
        const serialized = allSerializedValues[fieldPath];

        if (!isDeepEqual__default['default'](serialized, controller.serialize(controller.defaultValue))) {
          Object.assign(data, serialized);
        }
      });
      createFirstItem({
        variables: {
          data
        }
      }).then(() => {
        reinitContext();
        router$1.push('/');
      }).catch(() => {});
    }
  }, core.jsx(core.Stack, {
    gap: "large"
  }, error && core.jsx(components.GraphQLErrorNotice, {
    errors: error === null || error === void 0 ? void 0 : error.graphQLErrors,
    networkError: error === null || error === void 0 ? void 0 : error.networkError
  }), core.jsx(adminUiUtils.Fields, {
    fields: fields,
    fieldModes: null,
    forceValidation: forceValidation,
    invalidFields: invalidFields,
    onChange: setValue,
    value: value
  }), core.jsx(button.Button, {
    isLoading: loading || (data === null || data === void 0 ? void 0 : (_data$authenticate = data.authenticate) === null || _data$authenticate === void 0 ? void 0 : _data$authenticate.__typename) === `${listKey}AuthenticationWithPasswordSuccess`,
    type: "submit",
    weight: "bold",
    tone: "active"
  }, "Get started"))));
};

exports.InitPage = InitPage;
