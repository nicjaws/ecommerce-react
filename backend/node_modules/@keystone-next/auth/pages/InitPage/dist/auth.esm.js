import { useMemo, useState, useEffect } from 'react';
import { jsx, H1, Stack } from '@keystone-ui/core';
import { Button } from '@keystone-ui/button';
import { useKeystone, useReinitContext, useRawKeystone } from '@keystone-next/admin-ui/context';
import isDeepEqual from 'fast-deep-equal';
import { S as SigninContainer } from '../../../dist/SigninContainer-8016f876.esm.js';
import { useMutation, gql } from '@keystone-next/admin-ui/apollo';
import { useRouter } from '@keystone-next/admin-ui/router';
import { GraphQLErrorNotice } from '@keystone-next/admin-ui/components';
import { useInvalidFields, serializeValueToObjByFieldKey, Fields } from '@keystone-next/admin-ui-utils';

/* @jsx jsx */
const InitPage = ({
  fieldPaths,
  listKey
}) => {
  var _data$authenticate;

  const {
    adminMeta
  } = useKeystone();
  const fields = useMemo(() => {
    const fields = {};
    fieldPaths.forEach(fieldPath => {
      fields[fieldPath] = adminMeta.lists[listKey].fields[fieldPath];
    });
    return fields;
  }, [fieldPaths]);
  const [value, setValue] = useState(() => {
    let state = {};
    Object.keys(fields).forEach(fieldPath => {
      state[fieldPath] = {
        kind: 'value',
        value: fields[fieldPath].controller.defaultValue
      };
    });
    return state;
  });
  const invalidFields = useInvalidFields(fields, value);
  const [forceValidation, setForceValidation] = useState(false);
  const [createFirstItem, {
    loading,
    error,
    data
  }] = useMutation(gql`mutation($data: CreateInitial${listKey}Input!) {
    authenticate: createInitial${listKey}(data: $data) {
      ... on ${listKey}AuthenticationWithPasswordSuccess {
        item {
          id
        }
      }
    }
  }`);
  const reinitContext = useReinitContext();
  const router = useRouter();
  const rawKeystone = useRawKeystone();
  useEffect(() => {
    if (rawKeystone.authenticatedItem.state === 'authenticated') {
      router.push(router.query.from || '/');
    }
  }, [rawKeystone.authenticatedItem, router.query.from]);
  return jsx(SigninContainer, null, jsx(H1, null, "Welcome to KeystoneJS"), jsx("p", null, "Get Started by creating the first user:"), jsx("form", {
    onSubmit: event => {
      event.preventDefault();
      const newForceValidation = invalidFields.size !== 0;
      setForceValidation(newForceValidation);
      if (newForceValidation) return;
      const data = {};
      const allSerializedValues = serializeValueToObjByFieldKey(fields, value);
      Object.keys(allSerializedValues).forEach(fieldPath => {
        const {
          controller
        } = fields[fieldPath];
        const serialized = allSerializedValues[fieldPath];

        if (!isDeepEqual(serialized, controller.serialize(controller.defaultValue))) {
          Object.assign(data, serialized);
        }
      });
      createFirstItem({
        variables: {
          data
        }
      }).then(() => {
        reinitContext();
        router.push('/');
      }).catch(() => {});
    }
  }, jsx(Stack, {
    gap: "large"
  }, error && jsx(GraphQLErrorNotice, {
    errors: error === null || error === void 0 ? void 0 : error.graphQLErrors,
    networkError: error === null || error === void 0 ? void 0 : error.networkError
  }), jsx(Fields, {
    fields: fields,
    fieldModes: null,
    forceValidation: forceValidation,
    invalidFields: invalidFields,
    onChange: setValue,
    value: value
  }), jsx(Button, {
    isLoading: loading || (data === null || data === void 0 ? void 0 : (_data$authenticate = data.authenticate) === null || _data$authenticate === void 0 ? void 0 : _data$authenticate.__typename) === `${listKey}AuthenticationWithPasswordSuccess`,
    type: "submit",
    weight: "bold",
    tone: "active"
  }, "Get started"))));
};

export { InitPage };
