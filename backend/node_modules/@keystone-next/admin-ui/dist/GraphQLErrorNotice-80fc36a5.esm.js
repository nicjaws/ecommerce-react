import _extends from '@babel/runtime/helpers/esm/extends';
import { useTheme, jsx, H3, Stack } from '@keystone-ui/core';
import React, { Fragment } from 'react';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { useRouter } from 'next/router';
import { Button } from '@keystone-ui/button';
import { Popover } from '@keystone-ui/popover';
import { MoreHorizontalIcon } from '@keystone-ui/icons/icons/MoreHorizontalIcon';
import { ChevronRightIcon } from '@keystone-ui/icons/icons/ChevronRightIcon';
import { S as SignoutButton } from './SignoutButton-be30cf42.esm.js';
import { useKeystone } from '../context/dist/admin-ui.esm.js';
import { Link as Link$1 } from '../router/dist/admin-ui.esm.js';
import Link from 'next/link';
import { Notice } from '@keystone-ui/notice';

/* @jsx jsx */
const Logo = () => {
  var _adminConfig$componen;

  const {
    headingStyles
  } = useTheme();
  const {
    adminConfig
  } = useKeystone();

  if ((_adminConfig$componen = adminConfig.components) !== null && _adminConfig$componen !== void 0 && _adminConfig$componen.Logo) {
    return jsx(adminConfig.components.Logo, null);
  }

  return jsx(H3, null, jsx(Link, {
    href: "/",
    passHref: true
  }, jsx("a", {
    css: {
      color: headingStyles.h3.color,
      textDecoration: 'none'
    }
  }, "KeystoneJS")));
};

const NavItem = ({
  href,
  children
}) => {
  const {
    palette,
    spacing,
    radii,
    typography
  } = useTheme();
  const router = useRouter();
  const isSelected = router.pathname === href || router.pathname.split('/')[1] === href.split('/')[1];
  return jsx(Link$1, {
    "aria-current": isSelected ? 'location' : false,
    href: href,
    css: {
      background: 'transparent',
      borderBottomRightRadius: radii.xsmall,
      borderTopRightRadius: radii.xsmall,
      color: palette.neutral700,
      display: 'block',
      fontWeight: typography.fontWeight.medium,
      marginBottom: spacing.xsmall,
      marginRight: spacing.xlarge,
      padding: `${spacing.small}px ${spacing.xlarge}px`,
      position: 'relative',
      textDecoration: 'none',
      ':hover': {
        background: palette.blue50,
        color: palette.blue500
      },
      '&[aria-current=location]': {
        background: palette.neutral200,
        color: palette.neutral900
      }
    }
  }, children);
};

const AuthenticatedItem = ({
  item
}) => {
  const {
    spacing,
    typography
  } = useTheme();
  return jsx("div", {
    css: {
      alignItems: 'center',
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between',
      padding: spacing.xlarge
    }
  }, jsx("div", {
    css: {
      fontSize: typography.fontSize.small
    }
  }, "Signed in as ", jsx("strong", null, item.label)), jsx(Popover, {
    placement: "bottom",
    triggerRenderer: ({
      triggerProps
    }) => jsx(Button, _extends({
      size: "small",
      style: {
        padding: 0,
        width: 36
      },
      "aria-label": "Links and signout"
    }, triggerProps), jsx(MoreHorizontalIcon, null))
  }, jsx(Stack, {
    gap: "medium",
    padding: "large",
    dividers: "between"
  }, jsx(PopoverLink, {
    target: "_blank",
    href: "/api/graphql"
  }, "API Explorer"), jsx(PopoverLink, {
    target: "_blank",
    href: "https://github.com/keystonejs/keystone"
  }, "GitHub Repository"), jsx(PopoverLink, {
    target: "_blank",
    href: "https://www.keystonejs.com/documentation"
  }, "Keystone Documentation"), jsx(SignoutButton, null))));
};

const PopoverLink = (_ref) => {
  let {
    children
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children"]);

  const {
    typography
  } = useTheme();
  return jsx("a", _extends({
    css: {
      alignItems: 'center',
      display: 'flex',
      fontSize: typography.fontSize.small,
      textDecoration: 'none'
    }
  }, props), children, jsx(ChevronRightIcon, {
    size: "small"
  }));
};

const Navigation = () => {
  const {
    adminMeta: {
      lists
    },
    authenticatedItem,
    visibleLists
  } = useKeystone();
  return jsx("div", {
    css: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center'
    }
  }, authenticatedItem.state === 'authenticated' && jsx(AuthenticatedItem, {
    item: authenticatedItem
  }), jsx("nav", null, jsx(NavItem, {
    href: "/"
  }, "Dashboard"), (() => {
    if (visibleLists.state === 'loading') return null;

    if (visibleLists.state === 'error') {
      return jsx("span", {
        css: {
          color: 'red'
        }
      }, visibleLists.error instanceof Error ? visibleLists.error.message : visibleLists.error[0].message);
    }

    return Object.keys(lists).map(key => {
      if (!visibleLists.lists.has(key)) {
        return null;
      }

      const list = lists[key];
      return jsx(NavItem, {
        key: key,
        href: `/${list.path}`
      }, lists[key].label);
    });
  })()));
};

const HEADER_HEIGHT = 80;

const PageWrapper = props => {
  // const { colors } = useTheme();
  return jsx(Fragment, null, jsx("style", null, `body { overflow: hidden; }`), jsx("div", _extends({
    css: {
      // background: colors.background,
      display: 'grid',
      gridTemplateColumns: `minmax(300px, 1fr) 4fr`,
      gridTemplateRows: `${HEADER_HEIGHT}px auto`,
      height: '100vh'
    }
  }, props)));
};

const Sidebar = props => {
  // const { colors } = useTheme();
  return jsx("aside", _extends({
    css: {
      // borderRight: `1px solid ${colors.border}`,
      minWidth: 0,
      // resolves collapsing issues in children
      overflowY: 'auto',
      WebkitOverflowScrolling: 'touch'
    }
  }, props));
};

const Content = props => {
  const {
    colors,
    spacing
  } = useTheme();
  return jsx("main", _extends({
    css: {
      backgroundColor: colors.background,
      boxSizing: 'border-box',
      minWidth: 0,
      // resolves collapsing issues in children
      paddingLeft: spacing.xlarge,
      paddingRight: spacing.xlarge,
      overflowY: 'auto',
      WebkitOverflowScrolling: 'touch'
    }
  }, props));
};

const PageContainer = ({
  children,
  header
}) => {
  const {
    colors,
    spacing
  } = useTheme();
  return jsx(PageWrapper, null, jsx("div", {
    css: {
      alignItems: 'center',
      // borderRight: `1px solid ${colors.border}`,
      borderBottom: `1px solid ${colors.border}`,
      display: 'flex',
      justifyContent: 'space-between',
      paddingLeft: spacing.xlarge,
      paddingRight: spacing.xlarge
    }
  }, jsx(Logo, null)), jsx("header", {
    css: {
      alignItems: 'center',
      backgroundColor: colors.background,
      borderBottom: `1px solid ${colors.border}`,
      display: 'flex',
      justifyContent: 'space-between',
      minWidth: 0,
      // fix flex text truncation
      paddingLeft: spacing.xlarge,
      paddingRight: spacing.xlarge
    }
  }, header), jsx(Sidebar, null, jsx(Navigation, null)), jsx(Content, null, children));
};

function GraphQLErrorNotice({
  errors,
  networkError
}) {
  if (networkError) {
    return /*#__PURE__*/React.createElement(Notice, {
      tone: "negative"
    }, networkError.message);
  }

  if (errors !== null && errors !== void 0 && errors.length) {
    return /*#__PURE__*/React.createElement(Stack, {
      gap: "small"
    }, errors.map(err => {
      var _errButAny$data, _errButAny$data$messa;

      const errButAny = err;

      if (err.name === 'ValidationFailureError' && (_errButAny$data = errButAny.data) !== null && _errButAny$data !== void 0 && (_errButAny$data$messa = _errButAny$data.messages) !== null && _errButAny$data$messa !== void 0 && _errButAny$data$messa.length) {
        return errButAny.data.messages.map(message => /*#__PURE__*/React.createElement(Notice, {
          tone: "negative"
        }, message));
      }

      return /*#__PURE__*/React.createElement(Notice, {
        tone: "negative"
      }, err.message);
    }));
  }

  return null;
}

export { GraphQLErrorNotice as G, HEADER_HEIGHT as H, Logo as L, Navigation as N, PageContainer as P };
