import { JSONValue } from '@keystone-next/types';
export declare const staticAdminMetaQuery: import("graphql/language/ast").DocumentNode;
declare type Maybe<T> = T | null;
export declare type StaticAdminMetaQuery = {
    __typename?: 'Query';
} & {
    keystone: {
        __typename: 'KeystoneMeta';
    } & {
        adminMeta: {
            __typename: 'KeystoneAdminMeta';
        } & Pick<KeystoneAdminMeta, 'enableSignout' | 'enableSessionItem'> & {
            lists: Array<{
                __typename: 'KeystoneAdminUIListMeta';
            } & Pick<KeystoneAdminUIListMeta, 'key' | 'itemQueryName' | 'listQueryName' | 'path' | 'label' | 'singular' | 'plural' | 'description' | 'initialColumns' | 'pageSize' | 'labelField' | 'initialSort'> & {
                fields: Array<{
                    __typename: 'KeystoneAdminUIFieldMeta';
                } & Pick<KeystoneAdminUIFieldMeta, 'path' | 'label' | 'isOrderable' | 'fieldMeta' | 'viewsHash' | 'customViewsHash'>>;
            }>;
        };
    };
};
/** All built-in and custom scalars, mapped to their actual values */
declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    JSON: JSONValue;
};
export declare type Query = {
    __typename: 'Query';
    keystone: KeystoneMeta;
};
declare type KeystoneMeta = {
    __typename: 'KeystoneMeta';
    adminMeta: KeystoneAdminMeta;
};
declare type KeystoneAdminMeta = {
    __typename: 'KeystoneAdminMeta';
    enableSignout: Scalars['Boolean'];
    enableSessionItem: Scalars['Boolean'];
    lists: Array<KeystoneAdminUIListMeta>;
    list: Maybe<KeystoneAdminUIListMeta>;
};
declare type KeystoneAdminUIListMeta = {
    __typename: 'KeystoneAdminUIListMeta';
    key: Scalars['String'];
    itemQueryName: Scalars['String'];
    listQueryName: Scalars['String'];
    hideCreate: Scalars['Boolean'];
    hideDelete: Scalars['Boolean'];
    path: Scalars['String'];
    label: Scalars['String'];
    singular: Scalars['String'];
    plural: Scalars['String'];
    description: Maybe<Scalars['String']>;
    initialColumns: Array<Scalars['String']>;
    pageSize: Scalars['Int'];
    labelField: Scalars['String'];
    fields: Array<KeystoneAdminUIFieldMeta>;
    initialSort: Maybe<KeystoneAdminUISort>;
};
declare type KeystoneAdminUISort = {
    __typename: 'KeystoneAdminUISort';
    field: Scalars['String'];
    direction: KeystoneAdminUISortDirection;
};
declare type KeystoneAdminUIFieldMeta = {
    __typename: 'KeystoneAdminUIFieldMeta';
    path: Scalars['String'];
    label: Scalars['String'];
    isOrderable: Scalars['Boolean'];
    fieldMeta: Maybe<Scalars['JSON']>;
    viewsHash: Scalars['String'];
    customViewsHash: Maybe<Scalars['String']>;
    createView: KeystoneAdminUIFieldMetaCreateView;
    listView: KeystoneAdminUIFieldMetaListView;
    itemView: Maybe<KeystoneAdminUIFieldMetaItemView>;
};
declare type KeystoneAdminUIFieldMetaCreateView = {
    __typename: 'KeystoneAdminUIFieldMetaCreateView';
    fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode;
};
declare type KeystoneAdminUIFieldMetaListView = {
    __typename: 'KeystoneAdminUIFieldMetaListView';
    fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode;
};
declare type KeystoneAdminUIFieldMetaItemView = {
    __typename: 'KeystoneAdminUIFieldMetaItemView';
    fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode;
};
declare type KeystoneAdminUIFieldMetaCreateViewFieldMode = 'edit' | 'hidden';
declare type KeystoneAdminUIFieldMetaListViewFieldMode = 'read' | 'hidden';
declare type KeystoneAdminUIFieldMetaItemViewFieldMode = 'edit' | 'read' | 'hidden';
declare type KeystoneAdminUISortDirection = 'ASC' | 'DESC';
export {};
