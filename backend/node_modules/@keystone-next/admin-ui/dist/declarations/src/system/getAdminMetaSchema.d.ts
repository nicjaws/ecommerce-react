import { KeystoneContext, KeystoneConfig, BaseKeystone, AdminMetaRootVal, ListMetaRootVal, FieldMetaRootVal } from '@keystone-next/types';
export declare function getAdminMetaSchema({ keystone, config, }: {
    keystone: BaseKeystone;
    config: KeystoneConfig;
}): {
    typeDefs: import("graphql/language/ast").DocumentNode;
    resolvers: {
        Query: {
            keystone(): {};
        };
        KeystoneMeta: {
            adminMeta(rootVal: any, args: any, context: {
                isAdminUIBuildProcess: true;
            } | KeystoneContext): AdminMetaRootVal | Promise<AdminMetaRootVal>;
        };
        KeystoneAdminMeta: {
            list(rootVal: AdminMetaRootVal, args: {
                key: string;
            }): ListMetaRootVal;
        };
        KeystoneAdminUIListMeta: {
            isHidden(rootVal: ListMetaRootVal, args: any, { session }: KeystoneContext): import("../../../types/src").MaybePromise<boolean>;
            hideDelete(rootVal: ListMetaRootVal, args: any, { session }: KeystoneContext): import("../../../types/src").MaybePromise<boolean>;
            hideCreate(rootVal: ListMetaRootVal, args: any, { session }: KeystoneContext): import("../../../types/src").MaybePromise<boolean>;
        };
        KeystoneAdminUIFieldMeta: {
            createView(rootVal: FieldMetaRootVal): FieldIdentifier;
            listView(rootVal: FieldMetaRootVal): FieldIdentifier;
            itemView(rootVal: FieldMetaRootVal, args: {
                id: string;
            }): FieldIdentifier & {
                itemId: string;
            };
        };
        KeystoneAdminUIFieldMetaCreateView: {
            fieldMode(rootVal: FieldIdentifier, args: any, { session }: KeystoneContext): any;
        };
        KeystoneAdminUIFieldMetaListView: {
            fieldMode(rootVal: FieldIdentifier, args: any, { session }: KeystoneContext): any;
        };
        KeystoneAdminUIFieldMetaItemView: {
            fieldMode(rootVal: FieldIdentifier & {
                itemId: string;
            }, args: any, context: KeystoneContext): Promise<any>;
        };
    };
};
declare type FieldIdentifier = {
    listKey: string;
    fieldPath: string;
};
export {};
