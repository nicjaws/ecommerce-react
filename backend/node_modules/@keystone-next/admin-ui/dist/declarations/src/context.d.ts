import { ReactNode } from 'react';
import { ApolloError, DocumentNode } from './apollo';
import type { AdminConfig, AdminMeta, FieldViews } from '@keystone-next/types';
import { AuthenticatedItem, VisibleLists, CreateViewFieldModes } from './utils/useLazyMetadata';
declare type KeystoneContextType = {
    adminConfig: AdminConfig;
    adminMeta: {
        state: 'loaded';
        value: AdminMeta;
    } | {
        state: 'error';
        error: ApolloError;
        refetch: () => void;
    };
    fieldViews: FieldViews;
    authenticatedItem: AuthenticatedItem;
    visibleLists: VisibleLists;
    createViewFieldModes: CreateViewFieldModes;
    reinitContext: () => void;
};
declare type KeystoneProviderProps = {
    children: ReactNode;
    adminConfig: AdminConfig;
    adminMetaHash: string;
    fieldViews: FieldViews;
    lazyMetadataQuery: DocumentNode;
};
export declare const KeystoneProvider: (props: KeystoneProviderProps) => JSX.Element;
export declare const useKeystone: () => {
    adminConfig: AdminConfig;
    adminMeta: AdminMeta;
    authenticatedItem: AuthenticatedItem;
    visibleLists: VisibleLists;
    createViewFieldModes: CreateViewFieldModes;
};
export declare const useReinitContext: () => () => void;
export declare const useRawKeystone: () => KeystoneContextType;
export declare const useList: (key: string) => import("@keystone-next/types").ListMeta;
export {};
