import type { FieldType, BaseGeneratedListTypes, FieldDefaultValue } from '@keystone-next/types';
import type { FieldConfig } from '../../interfaces';
declare type SelectDisplayConfig = {
    ui?: {
        displayMode?: 'select';
        /**
         * The path of the field to use from the related list for item labels in the select.
         * Defaults to the labelField configured on the related list.
         */
        labelField?: string;
    };
};
declare type CardsDisplayConfig = {
    ui?: {
        displayMode: 'cards';
        cardFields: string[];
        /** Causes the default Card component to render as a link to navigate to the related item */
        linkToItem?: boolean;
        /** Determines whether removing a related item in the UI will delete or unlink it */
        removeMode?: 'disconnect' | 'none';
        /** Configures inline create mode for cards (alternative to opening the create modal) */
        inlineCreate?: {
            fields: string[];
        };
        /** Configures inline edit mode for cards */
        inlineEdit?: {
            fields: string[];
        };
        /** Configures whether a select to add existing items should be shown or not */
        inlineConnect?: boolean;
    };
};
export declare type RelationshipFieldConfig<TGeneratedListTypes extends BaseGeneratedListTypes> = FieldConfig<TGeneratedListTypes> & {
    many?: boolean;
    ref: string;
    ui?: {
        hideCreate?: boolean;
    };
    defaultValue?: FieldDefaultValue<Record<string, unknown>>;
    isIndexed?: boolean;
    isUnique?: boolean;
} & (SelectDisplayConfig | CardsDisplayConfig);
export declare const relationship: <TGeneratedListTypes extends BaseGeneratedListTypes>(config: RelationshipFieldConfig<TGeneratedListTypes>) => FieldType<TGeneratedListTypes>;
export {};
