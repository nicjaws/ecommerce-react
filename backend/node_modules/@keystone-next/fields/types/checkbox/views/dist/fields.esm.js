import { CellContainer } from '@keystone-next/admin-ui/components';
import { useTheme, jsx } from '@keystone-ui/core';
import { FieldContainer, Checkbox, FieldLabel } from '@keystone-ui/fields';

/* @jsx jsx */
const Field = ({
  field,
  value,
  onChange,
  autoFocus
}) => {
  const {
    fields,
    typography
  } = useTheme();
  return jsx(FieldContainer, null, jsx(Checkbox, {
    autoFocus: autoFocus,
    disabled: onChange === undefined,
    onChange: event => {
      onChange === null || onChange === void 0 ? void 0 : onChange(event.target.checked);
    },
    checked: value
  }, jsx("span", {
    css: {
      fontWeight: typography.fontWeight.semibold,
      color: fields.labelColor
    }
  }, field.label)));
};
const Cell = ({
  item,
  field
}) => {
  const value = !!item[field.path];
  return jsx(CellContainer, null, jsx(Checkbox, {
    disabled: true,
    checked: value,
    size: "small"
  }, jsx("span", {
    css: {}
  }, value ? 'True' : 'False')));
};
const CardValue = ({
  item,
  field
}) => {
  return jsx(FieldContainer, null, jsx(FieldLabel, null, field.label), item[field.path] + '');
};
const controller = config => {
  return {
    path: config.path,
    label: config.label,
    graphqlSelection: config.path,
    defaultValue: false,

    deserialize(item) {
      const value = item[config.path];
      return typeof value === 'boolean' ? value : false;
    },

    serialize(value) {
      return {
        [config.path]: value
      };
    },

    filter: {
      Filter() {
        return null;
      },

      graphql({
        type,
        value
      }) {
        const key = type === 'is' ? `${config.path}` : `${config.path}_${type}`;
        return {
          [key]: value
        };
      },

      Label({
        label
      }) {
        return label.toLowerCase();
      },

      types: {
        is: {
          label: 'is',
          initialValue: true
        },
        not: {
          label: 'is not',
          initialValue: true
        }
      }
    }
  };
};

export { CardValue, Cell, Field, controller };
