import type { MaybePromise } from '../utils';
import type { BaseGeneratedListTypes, KeystoneContext } from '..';
declare type BaseAccessArgs = {
    session: any;
    listKey: string;
    context: KeystoneContext;
    gqlName?: string;
};
declare type CreateAccessArgs<GeneratedListTypes extends BaseGeneratedListTypes> = BaseAccessArgs & {
    operation: 'create';
    /**
     * The input passed in from the GraphQL API
     */
    originalInput?: GeneratedListTypes['inputs']['create'] | readonly {
        readonly data: GeneratedListTypes['inputs']['create'];
    }[];
};
declare type CreateAccessControl<GeneratedListTypes extends BaseGeneratedListTypes> = boolean | ((args: CreateAccessArgs<GeneratedListTypes>) => MaybePromise<boolean>);
declare type ReadAccessArgs = BaseAccessArgs & {
    operation: 'read';
};
declare type ReadListAccessControl<GeneratedListTypes extends BaseGeneratedListTypes> = boolean | GeneratedListTypes['inputs']['where'] | ((args: ReadAccessArgs) => MaybePromise<GeneratedListTypes['inputs']['where'] | boolean>);
declare type UpdateAccessArgs<GeneratedListTypes extends BaseGeneratedListTypes> = BaseAccessArgs & {
    /**
     * The id being updated if a single item is being updated
     */
    itemId?: string;
    /**
     * The ids being updated if many items are being updated
     */
    itemIds?: string[];
    operation: 'update';
    /**
     * The input passed in from the GraphQL API
     */
    originalInput?: GeneratedListTypes['inputs']['update'] | readonly {
        readonly id: string;
        readonly data: GeneratedListTypes['inputs']['update'];
    }[];
};
declare type UpdateListAccessControl<GeneratedListTypes extends BaseGeneratedListTypes> = boolean | GeneratedListTypes['inputs']['where'] | ((args: UpdateAccessArgs<GeneratedListTypes>) => MaybePromise<GeneratedListTypes['inputs']['where'] | boolean>);
declare type DeleteAccessArgs = BaseAccessArgs & {
    /**
     * The id being deleted if a single item is being deleted
     */
    itemId?: string;
    /**
     * The ids being deleted if many items are being deleted
     */
    itemIds?: string[];
    operation: 'delete';
};
declare type DeleteListAccessControl<GeneratedListTypes extends BaseGeneratedListTypes> = boolean | GeneratedListTypes['inputs']['where'] | ((args: DeleteAccessArgs) => MaybePromise<GeneratedListTypes['inputs']['where'] | boolean>);
export declare type ListAccessControl<GeneratedListTypes extends BaseGeneratedListTypes> = {
    create?: CreateAccessControl<GeneratedListTypes>;
    read?: ReadListAccessControl<GeneratedListTypes>;
    update?: UpdateListAccessControl<GeneratedListTypes>;
    delete?: DeleteListAccessControl<GeneratedListTypes>;
} | ((args: ReadAccessArgs | CreateAccessArgs<GeneratedListTypes> | UpdateAccessArgs<GeneratedListTypes> | DeleteAccessArgs) => MaybePromise<GeneratedListTypes['inputs']['where'] | boolean>);
declare type IndividualFieldAccessControl<Args> = boolean | ((args: Args) => MaybePromise<boolean>);
declare type BaseFieldAccessArgs = {
    fieldKey: string;
};
declare type FieldCreateAccessArgs<GeneratedListTypes extends BaseGeneratedListTypes> = CreateAccessArgs<GeneratedListTypes> & BaseFieldAccessArgs;
declare type FieldReadAccessArgs<GeneratedListTypes extends BaseGeneratedListTypes> = ReadAccessArgs & BaseFieldAccessArgs & {
    item: GeneratedListTypes['backing'];
};
declare type FieldUpdateAccessArgs<GeneratedListTypes extends BaseGeneratedListTypes> = UpdateAccessArgs<GeneratedListTypes> & BaseFieldAccessArgs & {
    item: GeneratedListTypes['backing'];
};
declare type FieldDeleteAccessArgs = DeleteAccessArgs & BaseFieldAccessArgs;
export declare type FieldAccessControl<GeneratedListTypes extends BaseGeneratedListTypes> = {
    create?: IndividualFieldAccessControl<FieldCreateAccessArgs<GeneratedListTypes>>;
    read?: IndividualFieldAccessControl<FieldReadAccessArgs<GeneratedListTypes>>;
    update?: IndividualFieldAccessControl<FieldUpdateAccessArgs<GeneratedListTypes>>;
    delete?: IndividualFieldAccessControl<FieldDeleteAccessArgs>;
} | IndividualFieldAccessControl<FieldCreateAccessArgs<GeneratedListTypes> | FieldReadAccessArgs<GeneratedListTypes> | FieldUpdateAccessArgs<GeneratedListTypes> | FieldDeleteAccessArgs>;
export {};
