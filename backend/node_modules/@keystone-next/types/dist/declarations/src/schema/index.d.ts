import type { GraphQLSchema } from 'graphql';
import type { FieldType, MaybeItemFunction, MaybeSessionFunction } from '..';
import type { BaseKeystone } from '../base';
import type { BaseGeneratedListTypes } from '../utils';
import type { ListHooks } from './hooks';
import type { ListAccessControl } from './access-control';
export declare type ListSchemaConfig = Record<string, ListConfig<BaseGeneratedListTypes, any>>;
export declare type BaseFields<TGeneratedListTypes extends BaseGeneratedListTypes> = {
    [key: string]: FieldType<TGeneratedListTypes>;
};
export declare type CacheHint = {
    scope: 'PRIVATE' | 'PUBLIC';
    maxAge: number;
};
export declare type ListConfig<TGeneratedListTypes extends BaseGeneratedListTypes, Fields extends BaseFields<TGeneratedListTypes>> = {
    /**
     * The label used for the list
     * @default listKey.replace(/([a-z])([A-Z])/g, '$1 $2').split(/\s|_|\-/).filter(i => i).map(upcase).join(' ');
     */
    label?: string;
    /**
     * The singular form of the list key
     * @default pluralize.singular(label)
     */
    singular?: string;
    /**
     * The plural form of the list key
     * @default pluralize.plural(label)
     */
    plural?: string;
    /**
     * Defaults the Admin UI and GraphQL descriptions
     */
    description?: string;
    fields: Fields;
    /**
     * Controls what data users of the Admin UI and GraphQL can access and change
     * @default true
     * @see https://www.keystonejs.com/guides/access-control
     */
    access?: ListAccessControl<TGeneratedListTypes> | boolean;
    idField?: FieldType<TGeneratedListTypes>;
    /** Config for how this list should act in the Admin UI */
    ui?: {
        /**
         * The field to use as a label in the Admin UI. If you want to base the label off more than a single field, use a virtual field and reference that field here.
         * @default 'name' if it exists, otherwise 'id'
         */
        labelField?: keyof Fields;
        /**
         * Excludes this list from the Admin UI
         * @default false
         */
        isHidden?: MaybeSessionFunction<boolean>;
        /** The path that the list should be at in the Admin UI */
        path?: string;
        /**
         * The description shown on the list page
         * @default listConfig.description
         */
        description?: string;
        /**
         * Hides the create button in the Admin UI.
         * Note that this does **not** disable creating items through the GraphQL API, it only hides the button to create an item for this list in the Admin UI.
         * @default false
         */
        hideCreate?: MaybeSessionFunction<boolean>;
        /**
         * Hides the delete button in the Admin UI.
         * Note that this does **not** disable deleting items through the GraphQL API, it only hides the button to delete an item for this list in the Admin UI.
         * @default false
         */
        hideDelete?: MaybeSessionFunction<boolean>;
        /**
         * Configuration specific to the create view in the Admin UI
         */
        createView?: {
            /**
             * The default field mode for fields on the create view for this list.
             * Specific field modes on a per-field basis via a field's config.
             * @default 'edit'
             */
            defaultFieldMode?: MaybeSessionFunction<'edit' | 'hidden'>;
        };
        /**
         * Configuration specific to the list view in the Admin UI
         */
        listView?: {
            /**
             * The default field mode for fields on the create view for this list.
             * Specific field modes on a per-field basis via a field's config.
             * @default 'read'
             */
            defaultFieldMode?: MaybeSessionFunction<'read' | 'hidden'>;
            /**
             * The columns(which refer to fields) that should be shown to users of the Admin UI.
             * Users of the Admin UI can select different columns to show in the UI.
             * @default the first three fields in the list
             */
            initialColumns?: (keyof Fields)[];
            initialSort?: {
                field: keyof Fields;
                direction: 'ASC' | 'DESC';
            };
            pageSize?: number;
        };
        /**
         * Configuration specific to the item view in the Admin UI
         */
        itemView?: {
            /**
             * The default field mode for fields on the create view for this list.
             * This controls what people can do for fields
             * Specific field modes on a per-field basis via a field's config.
             * @default 'edit'
             */
            defaultFieldMode?: MaybeItemFunction<'edit' | 'read' | 'hidden'>;
        };
    };
    graphql?: {
        cacheHint?: CacheHint;
        /**
         * The description added to the GraphQL schema
         * @default listConfig.description
         */
        description?: string;
        itemQueryName?: string;
        listQueryName?: string;
        queryLimits?: {
            maxResults?: number;
        };
    };
    db?: Record<string, any>;
    /**
     * Hooks to modify the behaviour of GraphQL operations at certain points
     * @see https://www.keystonejs.com/guides/hooks
     */
    hooks?: ListHooks<TGeneratedListTypes>;
    plugins?: any[];
};
export declare type ExtendGraphqlSchema = (schema: GraphQLSchema, keystone: BaseKeystone) => GraphQLSchema;
