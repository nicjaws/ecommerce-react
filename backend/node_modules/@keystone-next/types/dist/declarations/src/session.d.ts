/// <reference types="node" />
import type { JSONValue } from './utils';
import type { ServerResponse, IncomingMessage } from 'http';
import { CreateContext } from '.';
export declare type SessionStrategy<StoredSessionData, StartSessionData = never> = {
    connect?: () => Promise<void>;
    disconnect?: () => Promise<void>;
    start: (args: {
        res: ServerResponse;
        data: StoredSessionData | StartSessionData;
        createContext: CreateContext;
    }) => Promise<string>;
    end: (args: {
        req: IncomingMessage;
        res: ServerResponse;
        createContext: CreateContext;
    }) => Promise<void>;
    get: (args: {
        req: IncomingMessage;
        createContext: CreateContext;
    }) => Promise<StoredSessionData | undefined>;
};
export declare type SessionStore = {
    connect?: () => Promise<void>;
    disconnect?: () => Promise<void>;
    get(key: string): undefined | JSONValue | Promise<JSONValue | undefined>;
    set(key: string, value: JSONValue): // ðŸ˜ž using any here rather than void to be compatible with Map. note that `| Promise<void>` doesn't actually do anything type wise because it just turns into any, it's just to show intent here
    any | Promise<void>;
    delete(key: string): // ðŸ˜ž | boolean is for compatibility with Map
    void | boolean | Promise<void>;
};
export declare type SessionStoreFunction = (args: {
    /**
     * The number of seconds that a cookie session be valid for
     */
    maxAge: number;
}) => SessionStore;
