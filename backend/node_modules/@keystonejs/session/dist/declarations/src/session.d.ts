import type { SessionOptions } from 'express-session';
import { Request } from 'express';
declare type _Item = {
    id: string;
};
declare type _List = {
    key: string;
    adapter: {
        itemsQuery: (args: {
            where: {
                id: string;
            };
        }) => Promise<_Item[]>;
    };
};
declare type _Keystone = {
    lists: Record<string, _List>;
};
export declare class SessionManager {
    _cookieSecret: SessionOptions['secret'];
    _cookie: SessionOptions['cookie'];
    _sessionStore: SessionOptions['store'];
    constructor({ cookieSecret, cookie, sessionStore, }: {
        cookieSecret: SessionOptions['secret'];
        cookie: SessionOptions['cookie'];
        sessionStore: SessionOptions['store'];
    });
    getSessionMiddleware({ keystone }: {
        keystone: _Keystone;
    }): import("express").RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>[];
    _getAuthedItem(req: Request, keystone: _Keystone): Promise<_Item | undefined>;
    startAuthedSession(req: Request, { item, list }: {
        item: _Item;
        list: _List;
    }): Promise<unknown>;
    endAuthedSession(req: Request): Promise<{
        success: boolean;
        listKey: string;
        itemId: string;
    }>;
    getContext(req: Request): {
        startAuthedSession: ({ item, list }: {
            item: _Item;
            list: _List;
        }) => Promise<unknown>;
        endAuthedSession: () => Promise<{
            success: boolean;
            listKey: string;
            itemId: string;
        }>;
    };
}
export {};
