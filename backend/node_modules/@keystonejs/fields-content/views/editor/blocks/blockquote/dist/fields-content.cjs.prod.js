'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('@babel/runtime/helpers/objectWithoutProperties');
var core = require('@emotion/core');
require('@arch-ui/theme');
var _extends = require('@babel/runtime/helpers/extends');
var octiconsReact = require('@primer/octicons-react');
require('@arch-ui/color-utils');
require('@arch-ui/tooltip');
require('@arch-ui/typography');
var toolbarComponents = require('../../../../../dist/toolbar-components-21f615db.cjs.prod.js');
var utils = require('../../../../../dist/utils-4597611a.cjs.prod.js');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);

let type = 'blockquote';
function ToolbarElement({
  editor,
  editorState
}) {
  let hasBlockquote = utils.hasAncestorBlock(editorState, type);
  return core.jsx(toolbarComponents.ToolbarButton, {
    isActive: hasBlockquote,
    icon: core.jsx(octiconsReact.QuoteIcon, null),
    label: "Blockquote",
    onClick: () => {
      if (hasBlockquote) {
        editor.unwrapBlock(type);
      } else {
        editor.wrapBlock(type);
      }

      editor.focus();
    }
  });
}
function Node({
  attributes,
  children
}) {
  return core.jsx("blockquote", _extends__default['default']({}, attributes, {
    css: {
      borderLeft: '4px solid #eee',
      color: '#666',
      fontStyle: 'italic',
      margin: 0,
      marginBottom: '1em',
      paddingLeft: '1em'
    }
  }), children);
}

exports.Node = Node;
exports.ToolbarElement = ToolbarElement;
exports.type = type;
