'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('@babel/runtime/helpers/objectWithoutProperties');
require('@emotion/core');
var React = require('react');
require('@arch-ui/theme');
require('@babel/runtime/helpers/extends');
var views_editor_blocks_paragraph_dist_fieldsContent = require('../../paragraph/dist/fields-content.cjs.dev.js');
var octiconsReact = require('@primer/octicons-react');
require('@arch-ui/color-utils');
require('@arch-ui/tooltip');
require('@arch-ui/typography');
var toolbarComponents = require('../../../../../dist/toolbar-components-5704db01.cjs.dev.js');
var utils = require('../../../../../dist/utils-5bfe488b.cjs.dev.js');
var views_editor_blocks_listItem_dist_fieldsContent = require('../../list-item/dist/fields-content.cjs.dev.js');

let handleListButtonClick = (editor, editorState, type) => {
  let isListItem = utils.hasBlock(editorState, views_editor_blocks_listItem_dist_fieldsContent.type);
  let isOrderedList = utils.hasAncestorBlock(editorState, type);
  let otherListType = type === 'ordered-list' ? 'unordered-list' : 'ordered-list';

  if (isListItem && isOrderedList) {
    editor.setBlocks(views_editor_blocks_paragraph_dist_fieldsContent.type);
    editor.unwrapBlock(type);
  } else if (isListItem) {
    editor.unwrapBlock(otherListType);
    editor.wrapBlock(type);
  } else {
    editor.setBlocks(views_editor_blocks_listItem_dist_fieldsContent.type).wrapBlock(type);
  }

  editor.focus();
};

let type = 'unordered-list';
function ToolbarElement({
  editor,
  editorState
}) {
  return /*#__PURE__*/React.createElement(toolbarComponents.ToolbarButton, {
    label: "Unordered List",
    icon: /*#__PURE__*/React.createElement(octiconsReact.ListUnorderedIcon, null),
    isActive: utils.hasAncestorBlock(editorState, type),
    onClick: () => {
      handleListButtonClick(editor, editorState, type);
    }
  });
}
let getPlugins = () => [{
  onKeyDown(event, editor, next) {
    // make it so when you press enter in an empty list item,
    // the block type will change to a paragraph
    if (event.keyCode === 13 && utils.hasAncestorBlock(editor.value, type) && editor.value.focusText.text === '') {
      editor.setBlocks(views_editor_blocks_paragraph_dist_fieldsContent.type).unwrapBlock(type);
      return;
    }

    next();
  }

}];
function Node({
  attributes,
  children
}) {
  return /*#__PURE__*/React.createElement("ul", attributes, children);
}
const getSchema = () => ({
  nodes: [{
    match: {
      type: views_editor_blocks_listItem_dist_fieldsContent.type
    },
    min: 0
  }],

  normalize(editor, error) {
    switch (error.code) {
      case 'child_type_invalid':
        {
          editor.unwrapBlockByKey(error.node.key, type);
          return;
        }
    }
  }

});

exports.Node = Node;
exports.ToolbarElement = ToolbarElement;
exports.getPlugins = getPlugins;
exports.getSchema = getSchema;
exports.type = type;
