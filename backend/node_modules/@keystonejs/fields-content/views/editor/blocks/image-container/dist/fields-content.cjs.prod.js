'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectSpread2 = require('../../../../../dist/objectSpread2-4dba075b.cjs.prod.js');
var slate = require('slate');
var core = require('@emotion/core');
var blockMenuItem = require('../../../../../dist/block-menu-item-602f7066.cjs.prod.js');
var React = require('react');
var _extends = require('@babel/runtime/helpers/extends');
var slateReact = require('slate-react');
var insertImages = require('slate-drop-or-paste-images');
var imageExtensions = require('image-extensions');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var insertImages__default = /*#__PURE__*/_interopDefault(insertImages);
var imageExtensions__default = /*#__PURE__*/_interopDefault(imageExtensions);

let type = 'image-container';

let getFiles = () => new Promise(resolve => {
  let input = document.createElement('input');
  input.type = 'file';

  input.onchange = () => resolve([...input.files]);

  input.click();
});

const insertImageBlockFromFile = (blocks, editor, file) => {
  const reader = new FileReader();

  reader.onload = event => insertImageBlock(blocks, editor, file, event.target.result);

  reader.readAsDataURL(file);
};

const insertImageBlock = (blocks, editor, file, src) => {
  editor.insertBlock({
    type,
    nodes: [slate.Block.create({
      type: blocks.image.type,
      data: {
        file,
        src
      }
    })]
  });
};

function Sidebar({
  blocks,
  editor
}) {
  const icon = core.jsx("svg", {
    width: 16,
    height: 16,
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 576 512"
  }, core.jsx("path", {
    d: "M480 416v16c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V176c0-26.51 21.49-48 48-48h16v208c0 44.112 35.888 80 80 80h336zm96-80V80c0-26.51-21.49-48-48-48H144c-26.51 0-48 21.49-48 48v256c0 26.51 21.49 48 48 48h384c26.51 0 48-21.49 48-48zM256 128c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-96 144l55.515-55.515c4.686-4.686 12.284-4.686 16.971 0L272 256l135.515-135.515c4.686-4.686 12.284-4.686 16.971 0L512 208v112H160v-48z"
  }));
  return core.jsx(blockMenuItem.BlockMenuItem, {
    icon: icon,
    text: "Insert Image",
    insertBlock: () => {
      getFiles().then(files => {
        files.forEach(file => insertImageBlockFromFile(blocks, editor, file));
      });
    }
  });
}

function getImageStyle(alignment) {
  if (alignment === 'left') {
    return {
      float: 'left',
      marginRight: '10px',
      width: '50%'
    };
  } else if (alignment === 'right') {
    return {
      float: 'right',
      marginLeft: '10px',
      width: '50%'
    };
  } else {
    return {
      display: 'block',
      margin: '0px auto',
      width: '100%'
    };
  }
}

function Node(props) {
  let alignment = props.node.data.get('alignment');
  return core.jsx("figure", _extends__default['default']({
    css: objectSpread2._objectSpread2({
      display: 'flex',
      flexDirection: 'column'
    }, getImageStyle(alignment))
  }, props.attributes), core.jsx(props.blocks.image.ImageAlignmentContext.Provider, {
    value: React.useMemo(() => {
      return {
        alignment,

        onAlignmentChange(newAlignment) {
          props.editor.setNodeByKey(props.node.key, {
            data: props.node.data.set('alignment', newAlignment)
          });
        }

      };
    }, [props.node.key, alignment, props.editor, props.node.data])
  }, props.children));
}
let getSchema = ({
  blocks: {
    image,
    caption
  }
}) => ({
  nodes: [{
    match: [{
      type: image.type
    }],
    min: 1,
    max: 1
  }, {
    match: [{
      type: caption.type
    }],
    min: 1,
    max: 1
  }],

  normalize(editor, error) {
    switch (error.code) {
      case 'child_min_invalid':
        {
          if (error.index === 0) {
            // the image has been deleted so we also want to delete the image-container
            editor.removeNodeByKey(error.node.key);
          }

          if (error.index === 1) {
            // the caption has been deleted
            // the user probably doesn't want to delete the image
            // they probably just wanted to remove everything in the caption
            // so the caption gets removed,  we insert another caption
            editor.insertNodeByKey(error.node.key, 1, slate.Block.create('caption'));
          }

          return;
        }

      case 'node_data_invalid':
        {
          if (error.key === 'alignment') {
            editor.setNodeByKey(error.node.key, {
              data: error.node.data.set('alignment', 'center')
            });
          }

          return;
        }
    }

    console.log(error);
  },

  data: {
    alignment(value) {
      switch (value) {
        case 'center':
        case 'left':
        case 'right':
          {
            return true;
          }
      }

      return false;
    }

  }
});
let getPlugins = ({
  blocks
}) => [insertImages__default['default']({
  extensions: imageExtensions__default['default'],
  insertImage: insertImageBlockFromFile.bind(null, blocks)
}), {
  onDragStart(event, editor, next) {
    const {
      value
    } = editor;
    const {
      document
    } = value;
    const node = slateReact.findNode(event.target, editor);

    if (node.type === blocks.image.type) {
      const ancestors = document.getAncestors(node.key);
      let imgContainer = ancestors.get(ancestors.size - 1);

      if (imgContainer.type === type) {
        editor.moveToRangeOfNode(imgContainer);
      }
    }

    next();
  }

}];

exports.Node = Node;
exports.Sidebar = Sidebar;
exports.getPlugins = getPlugins;
exports.getSchema = getSchema;
exports.type = type;
