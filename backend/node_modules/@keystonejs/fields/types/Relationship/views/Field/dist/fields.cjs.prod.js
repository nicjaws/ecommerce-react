'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectSpread2 = require('../../../../../dist/objectSpread2-4dba075b.cjs.prod.js');
var core = require('@emotion/core');
var React = require('react');
var client = require('@apollo/client');
var fields = require('@arch-ui/fields');
var octiconsReact = require('@primer/octicons-react');
var theme = require('@arch-ui/theme');
var button = require('@arch-ui/button');
var Tooltip = require('@arch-ui/tooltip');
var RelationshipSelect = require('../../../../../dist/RelationshipSelect-3b2b5df6.cjs.prod.js');
var components = require('@keystonejs/app-admin-ui/components');
require('@babel/runtime/helpers/extends');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@arch-ui/select');
require('react-select');
require('intersection-observer');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var Tooltip__default = /*#__PURE__*/_interopDefault(Tooltip);

const MAX_IDS_IN_FILTER = 100;

function SetAsCurrentUser({
  listKey,
  value,
  onAddUser,
  many,
  isDisabled
}) {
  const path = 'authenticated' + listKey;
  const {
    data
  } = client.useQuery(client.gql`
    query User {
      ${path} {
        _label_
        id
      }
    }
  `);

  if (data && data[path]) {
    const userId = data[path].id;

    if (value !== null && (many ? value.some(item => item.id === userId) : value.id === userId)) {
      return null;
    }

    const label = `${many ? 'Add' : 'Set as'} ${data[path]._label_}`;
    return core.jsx(Tooltip__default['default'], {
      placement: "top",
      content: label
    }, ref => core.jsx(button.IconButton, {
      css: {
        marginLeft: theme.gridSize
      },
      variant: "ghost",
      ref: ref,
      onClick: () => {
        onAddUser(data[path]);
      },
      icon: octiconsReact.PersonIcon,
      "aria-label": label,
      isDisabled: isDisabled
    }));
  }

  return null;
}

function LinkToRelatedItems({
  field,
  value
}) {
  const {
    many
  } = field.config;
  const {
    fullPath
  } = field.getRefList();
  let isDisabled = false;
  let label;
  let link = fullPath;

  if (many) {
    label = 'View List of Related Items';

    if (!value.length) {
      isDisabled = true;
    } // What happens when there are 10,000 ids? The URL would be too
    // big, so we arbitrarily limit it to the first 100


    link = `${link}?!id_in="${value.slice(0, MAX_IDS_IN_FILTER).map(({
      id
    }) => id).join(',')}"`;
  } else {
    label = 'View Item Details';

    if (!value) {
      isDisabled = true;
    } else {
      link = `${link}/${value.id}`;
    }
  }

  return core.jsx(Tooltip__default['default'], {
    placement: "top",
    content: label
  }, ref => core.jsx(button.IconButton, {
    ref: ref,
    icon: octiconsReact.LinkExternalIcon,
    "aria-label": label,
    variant: "ghost",
    css: {
      marginLeft: theme.gridSize
    },
    target: "_blank",
    to: link,
    isDisabled: isDisabled
  }));
}

function CreateAndAddItem({
  field,
  item,
  onCreate,
  isDisabled
}) {
  const {
    list,
    openCreateItemModal
  } = components.useList();
  let relatedList = field.getRefList();
  let label = `Create and add ${relatedList.singular}`;
  let prefillData;

  if (item && item.id) {
    prefillData = relatedList.fields // Find relationships on the refList which have a back link to this
    // Relationship field
    .filter(relatedField => relatedField.type === 'Relationship' && relatedField.config.ref === list.key && relatedField.config.refFieldPath === field.path) // And convert it into an object of data to prefill the form with
    .reduce((memo, prefillField) => {
      const prefill = {
        _label_: item._label_ || '<link to parent>',
        id: item.id
      };
      return objectSpread2._objectSpread2(objectSpread2._objectSpread2({}, memo), {}, {
        [prefillField.path]: prefillField.config.many ? [prefill] : prefill
      });
    }, {});
  }

  return core.jsx(React.Fragment, null, core.jsx(Tooltip__default['default'], {
    placement: "top",
    content: label
  }, ref => {
    return core.jsx(button.IconButton, {
      ref: ref,
      onClick: openCreateItemModal,
      icon: octiconsReact.PlusIcon,
      "aria-label": label,
      variant: "ghost",
      css: {
        marginLeft: theme.gridSize
      },
      isDisabled: isDisabled
    });
  }), core.jsx(components.CreateItemModal, {
    prefillData: prefillData,
    onCreate: ({
      data
    }) => {
      onCreate(data[relatedList.gqlNames.createMutationName]);
    }
  }));
}

const RelationshipField = ({
  autoFocus,
  field,
  value = [],
  renderContext,
  errors,
  onChange,
  item,
  list,
  isDisabled
}) => {
  const handleChange = option => {
    const {
      many
    } = field.config;

    if (many) {
      onChange(option ? option.map(i => i.value) : []);
    } else {
      onChange(option ? option.value : null);
    }
  };

  const {
    many,
    ref
  } = field.config;
  const {
    authStrategy
  } = components.useAdminMeta();
  const htmlID = `ks-input-${field.path}`;
  const relatedList = field.getRefList();
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(fields.FieldInput, null, core.jsx("div", {
    css: {
      flex: 1
    }
  }, core.jsx(RelationshipSelect.RelationshipSelect, {
    autoFocus: autoFocus,
    isMulti: many,
    field: field,
    value: value,
    errors: errors,
    renderContext: renderContext,
    htmlID: htmlID,
    onChange: handleChange,
    isDisabled: isDisabled
  })), core.jsx(components.ListProvider, {
    list: relatedList
  }, core.jsx(CreateAndAddItem, {
    onCreate: item => {
      onChange(many ? value.concat(item) : item);
    },
    field: field,
    item: item,
    list: list,
    isDisabled: isDisabled
  })), authStrategy && ref === authStrategy.listKey && core.jsx(SetAsCurrentUser, {
    many: many,
    onAddUser: user => {
      onChange(many ? value.concat(user) : user);
    },
    value: value,
    listKey: authStrategy.listKey,
    isDisabled: isDisabled
  }), core.jsx(LinkToRelatedItems, {
    field: field,
    value: value
  })));
};

exports.default = RelationshipField;
