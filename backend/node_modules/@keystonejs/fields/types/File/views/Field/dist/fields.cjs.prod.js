'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _extends = require('@babel/runtime/helpers/extends');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var core = require('@emotion/core');
var React = require('react');
var reactImage = require('react-image');
var PropTypes = require('prop-types');
var fields = require('@arch-ui/fields');
var octiconsReact = require('@primer/octicons-react');
var input = require('@arch-ui/input');
var loading = require('@arch-ui/loading');
var lozenge = require('@arch-ui/lozenge');
var button = require('@arch-ui/button');
var layout = require('@arch-ui/layout');
var theme = require('@arch-ui/theme');
var isEqual = require('lodash.isequal');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);
var isEqual__default = /*#__PURE__*/_interopDefault(isEqual);

function uploadButtonLabelFn({
  status
}) {
  return status === 'empty' ? 'Upload File' : 'Change File';
}

function cancelButtonLabelFn({
  status
}) {
  switch (status) {
    case 'stored':
      return 'Remove File';

    case 'removed':
      return 'Undo Remove';

    case 'updated':
    default:
      return 'Cancel';
  }
}

function statusMessageFn({
  status
}) {
  switch (status) {
    case 'removed':
      return 'save to remove';

    case 'updated':
      return 'save to upload';
  }
}

function errorMessageFn({
  type
}) {
  switch (type) {
    case 'save':
      return 'Something went wrong, please reload and try again.';

    case 'preview':
      return 'Something went wrong, please try again.';
  }
}

class FileField extends React.Component {
  static getDerivedStateFromProps(props, state) {
    const {
      savedValue,
      value
    } = props;
    const {
      changeStatus
    } = state;

    switch (changeStatus) {
      case 'removed':
        //file was removed and change was saved.
        if (savedValue === null && value === null) {
          return {
            originalFile: savedValue,
            changeStatus: 'empty'
          };
        }

        break;

      case 'updated':
        //file was updated and change was saved
        if (isEqual__default['default'](savedValue, value)) {
          return {
            originalFile: savedValue,
            changeStatus: 'stored'
          };
        }

        break;
    }

    return null;
  }

  constructor(props) {
    super(props);

    _defineProperty__default['default'](this, "onCancel", () => {
      // revert to the original file if available
      const {
        originalFile
      } = this.state;
      this.props.onChange(originalFile);
      if (this.inputRef) this.inputRef.value = '';
      this.setState({
        changeStatus: originalFile ? 'stored' : 'empty',
        dataURI: null,
        errorMessage: null
      });
    });

    _defineProperty__default['default'](this, "onRemove", () => {
      this.setState({
        changeStatus: 'removed',
        errorMessage: null
      });
      this.props.onChange(null);
    });

    _defineProperty__default['default'](this, "onChange", ({
      target: {
        validity,
        files: [file]
      }
    }) => {
      if (!file) return; // bail if the user cancels from the file browser

      const {
        errorMessage,
        onChange
      } = this.props;
      const newState = {
        changeStatus: 'updated'
      }; // basic validity check

      if (!validity.valid) {
        this.setState({
          errorMessage: errorMessage({
            type: 'save'
          })
        });
        return;
      } // resolve data URI for images


      if (file.type.includes('image')) {
        this.getDataURI(file);
        newState.oldImagePath = this.getImagePath(); // used during FileReader processing
      } else if (this.state.dataURI) {
        this.setState({
          dataURI: null,
          errorMessage: null
        });
      }

      onChange(file);
      this.setState(newState);
    });

    _defineProperty__default['default'](this, "openFileBrowser", () => {
      if (this.inputRef) this.inputRef.click();
    });

    _defineProperty__default['default'](this, "getFile", () => {
      const {
        value
      } = this.props;
      const {
        changeStatus,
        originalFile
      } = this.state;
      const isRemoved = changeStatus === 'removed';
      const file = isRemoved ? originalFile : value;
      const type = file && file['__typename'] ? 'server' : 'client';
      return {
        file,
        type
      };
    });

    _defineProperty__default['default'](this, "getDataURI", file => {
      const {
        errorMessage
      } = this.props;
      const reader = new FileReader();
      reader.readAsDataURL(file);

      reader.onloadstart = () => {
        this.setState({
          isLoading: true
        });
      };

      reader.onerror = err => {
        console.error('Error with Cloudinary preview', err);
        this.setState({
          errorMessage: errorMessage({
            type: 'preview'
          })
        });
      };

      reader.onloadend = upload => {
        this.setState({
          isLoading: false,
          dataURI: upload.target.result
        });
      };
    });

    _defineProperty__default['default'](this, "getImagePath", () => {
      const {
        dataURI
      } = this.state;
      const {
        file
      } = this.getFile(); // avoid jank during FileReader processing keeping the old image in place

      return file && file.mimetype && file.mimetype.includes('image') ? file.publicUrl : dataURI;
    });

    _defineProperty__default['default'](this, "getInputRef", ref => {
      this.inputRef = ref;
    });

    _defineProperty__default['default'](this, "renderUploadButton", () => {
      const {
        uploadButtonLabel,
        isDisabled
      } = this.props;
      const {
        changeStatus,
        isLoading
      } = this.state;
      return core.jsx(button.LoadingButton, {
        onClick: this.openFileBrowser,
        isLoading: isLoading,
        variant: "ghost",
        isDisabled: isDisabled
      }, uploadButtonLabel({
        status: changeStatus
      }));
    });

    _defineProperty__default['default'](this, "renderCancelButton", () => {
      const {
        cancelButtonLabel,
        isDisabled
      } = this.props;
      const {
        changeStatus
      } = this.state; // possible states; no case for 'empty' as cancel is not rendered

      let appearance = 'warning';
      let onClick = this.onRemove;

      switch (changeStatus) {
        case 'removed':
          appearance = 'primary';
          onClick = this.onCancel;
          break;

        case 'updated':
          onClick = this.onCancel;
          break;
      }

      return core.jsx(button.Button, {
        onClick: onClick,
        variant: "subtle",
        appearance: appearance,
        isDisabled: isDisabled
      }, cancelButtonLabel({
        status: changeStatus
      }));
    });

    const {
      value: _value
    } = props;

    const _changeStatus = _value ? 'stored' : 'empty';

    this.state = {
      originalFile: _value,
      changeStatus: _changeStatus,
      dataURI: null,
      errorMessage: null,
      isLoading: false,
      oldImagePath: null
    };
  } // ==============================
  // Change Handlers
  // ==============================


  render() {
    const {
      autoFocus,
      field,
      statusMessage,
      errors,
      isDisabled
    } = this.props;
    const {
      changeStatus,
      errorMessage
    } = this.state;
    const {
      file
    } = this.getFile();
    const imagePath = this.getImagePath();
    const showStatusMessage = ['removed', 'updated'].includes(changeStatus);
    const htmlID = `ks-input-${field.path}`;
    return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), core.jsx(fields.FieldDescription, {
      text: field.adminDoc
    }), core.jsx(fields.FieldInput, null, file ? core.jsx(Wrapper, null, imagePath && core.jsx(ImageContainer, {
      src: imagePath,
      alt: field.path
    }), core.jsx(Content, null, core.jsx(layout.FlexGroup, {
      style: {
        marginBottom: theme.gridSize
      }
    }, this.renderUploadButton(), this.renderCancelButton()), errorMessage ? core.jsx(ErrorInfo, null, errorMessage) : core.jsx(layout.FlexGroup, {
      isInline: true,
      growIndexes: [0]
    }, core.jsx(MetaInfo, {
      href: file.publicUrl
    }, file.filename || file.name), showStatusMessage ? core.jsx(ChangeInfo, {
      status: changeStatus
    }, statusMessage({
      status: changeStatus
    })) : null))) : this.renderUploadButton(), core.jsx(input.HiddenInput, {
      autoComplete: "off",
      autoFocus: autoFocus,
      id: htmlID,
      ref: this.getInputRef,
      name: field.path,
      onChange: this.onChange,
      type: "file",
      disabled: isDisabled
    })));
  }

} // ==============================
// Styled Components
// ==============================

_defineProperty__default['default'](FileField, "propTypes", {
  cancelButtonLabel: PropTypes__default['default'].func.isRequired,
  disabled: PropTypes__default['default'].bool,
  errorMessage: PropTypes__default['default'].func.isRequired,
  field: PropTypes__default['default'].object,
  onChange: PropTypes__default['default'].func.isRequired,
  statusMessage: PropTypes__default['default'].func.isRequired,
  uploadButtonLabel: PropTypes__default['default'].func.isRequired
});

_defineProperty__default['default'](FileField, "defaultProps", {
  cancelButtonLabel: cancelButtonLabelFn,
  errorMessage: errorMessageFn,
  statusMessage: statusMessageFn,
  uploadButtonLabel: uploadButtonLabelFn
});

const Wrapper = props => core.jsx("div", _extends__default['default']({
  css: {
    alignItems: 'flex-start',
    display: 'flex'
  }
}, props));

const Content = props => core.jsx("div", _extends__default['default']({
  css: {
    flex: 1,
    minWidth: 0
  }
}, props));

const MetaInfo = props => core.jsx(lozenge.Lozenge, _extends__default['default']({
  crop: "right"
}, props));

const ErrorInfo = (_ref) => {
  let {
    children
  } = _ref,
      props = _objectWithoutProperties__default['default'](_ref, ["children"]);

  return core.jsx(lozenge.Lozenge, _extends__default['default']({
    style: {
      backgroundColor: theme.colors.R.L80,
      borderColor: 'transparent',
      color: theme.colors.R.D20,
      display: 'inline-flex'
    }
  }, props), core.jsx(octiconsReact.AlertIcon, {
    css: {
      marginRight: theme.gridSize
    }
  }), children);
};

const appearanceMap = {
  default: 'primary',
  removed: 'danger',
  updated: 'create'
};

const ChangeInfo = (_ref2) => {
  let {
    status = 'default'
  } = _ref2,
      props = _objectWithoutProperties__default['default'](_ref2, ["status"]);

  const appearance = appearanceMap[status];
  return core.jsx(lozenge.Lozenge, _extends__default['default']({
    appearance: appearance
  }, props));
};

const Image = ({
  src: imgSrc,
  alt
}) => {
  const {
    src
  } = reactImage.useImage({
    srcList: imgSrc
  });
  return core.jsx("img", {
    css: {
      display: 'block',
      height: 'auto',
      maxWidth: '100%'
    },
    src: src,
    alt: alt
  });
};

const ImageContainer = props => {
  return core.jsx("div", {
    css: {
      backgroundColor: 'white',
      borderRadius: theme.borderRadius,
      border: `1px solid ${theme.colors.N20}`,
      flexShrink: 0,
      marginRight: theme.gridSize,
      padding: '4px',
      position: 'relative',
      textAlign: 'center',
      width: 130 // 120px image + chrome

    }
  }, core.jsx(ImageErrorBoundary, null, core.jsx(React.Suspense, {
    fallback: core.jsx(loading.LoadingIndicator, null)
  }, core.jsx(Image, props))));
};

class ImageErrorBoundary extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty__default['default'](this, "state", {
      hasError: false
    });
  }

  static getDerivedStateFromError() {
    return {
      hasError: true
    };
  }

  render() {
    if (this.state.hasError) {
      return core.jsx("div", {
        css: {
          padding: '4px 0',
          color: theme.colors.N40
        }
      }, core.jsx("div", null, core.jsx(octiconsReact.FileMediaIcon, null)), core.jsx("span", {
        css: {
          fontSize: '0.9em'
        }
      }, "Could not load image"));
    }

    return this.props.children;
  }

}

exports.default = FileField;
