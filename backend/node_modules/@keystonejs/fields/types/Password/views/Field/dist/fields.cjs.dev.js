'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@emotion/core');
var React = require('react');
var fields = require('@arch-ui/fields');
var alert = require('@arch-ui/alert');
var input = require('@arch-ui/input');
var layout = require('@arch-ui/layout');
var button = require('@arch-ui/button');
var octiconsReact = require('@primer/octicons-react');
var typography = require('@arch-ui/typography');

/** @jsx jsx */

const PasswordField = ({
  onChange,
  autoFocus,
  field,
  item: {
    password_is_set
  } = {},
  errors,
  warnings,
  isDisabled
}) => {
  const focusTarget = React.useRef();
  const [isEditing, setIsEditing] = React.useState(false);
  const [showInputValue, setShowInputValue] = React.useState(false);
  const [inputPassword, setInputPassword] = React.useState('');
  const [inputConfirm, setInputConfirm] = React.useState('');
  React.useEffect(() => {
    if (isEditing) {
      onChange({
        inputPassword,
        inputConfirm
      });
    }
  }, [inputPassword, inputConfirm]);
  React.useEffect(() => {
    if (isEditing && focusTarget.current) {
      focusTarget.current.focus();
    }
  }, [isEditing]);

  const toggleInterface = () => {
    setIsEditing(!isEditing);
  };

  const toggleMode = () => {
    setShowInputValue(!showInputValue);
  };

  const renderErrors = src => {
    const appearance = src === errors ? 'danger' : 'warning';
    return src.map(({
      message,
      data
    }) => core.jsx(alert.Alert, {
      appearance: appearance,
      key: message
    }, message, data ? ` - ${JSON.stringify(data)}` : null));
  };

  const htmlID = `ks-input-${field.path}`;
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(fields.FieldInput, null, isEditing ? core.jsx(layout.FlexGroup, {
    growIndexes: [0, 1]
  }, core.jsx(input.Input, {
    autoComplete: "off",
    autoFocus: autoFocus,
    id: htmlID,
    ref: focusTarget,
    name: "inputPassword",
    onChange: e => setInputPassword(e.target.value),
    placeholder: "New Password",
    type: showInputValue ? 'text' : 'password',
    value: inputPassword,
    disabled: isDisabled
  }), core.jsx(input.Input, {
    autoComplete: "off",
    autoFocus: autoFocus,
    id: `${htmlID}-confirm`,
    name: "inputConfirm",
    onChange: e => setInputConfirm(e.target.value),
    placeholder: "Confirm Password",
    type: showInputValue ? 'text' : 'password',
    value: inputConfirm,
    disabled: isDisabled
  }), core.jsx(button.Button, {
    isActive: showInputValue,
    onClick: toggleMode,
    title: showInputValue ? 'Hide Text' : 'Show Text',
    variant: "ghost",
    isDisabled: isDisabled
  }, core.jsx(typography.A11yText, null, showInputValue ? 'Hide Text' : 'Show Text'), core.jsx("div", {
    css: {
      width: 20
    }
  }, showInputValue ? core.jsx(octiconsReact.LockIcon, null) : core.jsx(octiconsReact.EyeIcon, null)))) : core.jsx(button.Button, {
    id: `${htmlID}-button`,
    onClick: toggleInterface,
    variant: "ghost",
    isDisabled: isDisabled
  }, password_is_set ? 'Update Password' : 'Set Password')), renderErrors(errors), renderErrors(warnings));
};

exports.default = PasswordField;
