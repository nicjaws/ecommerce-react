'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Controller_dist_fields = require('../../../../../Controller/dist/fields.cjs.prod.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/classCallCheck');
require('lodash.isequal');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);

class PasswordController extends Controller_dist_fields['default'] {
  constructor(...args) {
    super(...args);

    _defineProperty__default['default'](this, "getFilterGraphQL", ({
      type,
      value
    }) => {
      return {
        [`${this.path}_${type}`]: value
      };
    });

    _defineProperty__default['default'](this, "getFilterLabel", () => {
      return `${this.label}`;
    });

    _defineProperty__default['default'](this, "formatFilter", ({
      value
    }) => {
      return `${this.label} ${value ? 'is set' : 'is not set'}`;
    });

    _defineProperty__default['default'](this, "getQueryFragment", () => `${this.path}_is_set`);

    _defineProperty__default['default'](this, "getFilterTypes", () => [{
      type: 'is_set',
      label: 'Is Set',
      getInitialValue: () => true
    }]);

    _defineProperty__default['default'](this, "serialize", data => {
      // discard the "confirm" since we only need one version of the password
      return data[this.path] ? data[this.path].inputPassword : undefined;
    });

    _defineProperty__default['default'](this, "validateInput", ({
      originalInput,
      addFieldValidationError
    }) => {
      const {
        minLength
      } = this.config;

      if (this.isRequired) {
        if (!originalInput[this.path] || !originalInput[this.path].inputPassword) {
          return addFieldValidationError(`Password is required`);
        }
      } else if (!originalInput[this.path] || !originalInput[this.path].inputPassword) {
        //no password required and no password is set so just return
        return;
      }

      if (originalInput[this.path].inputPassword.length < minLength) {
        return addFieldValidationError(`Password must be at least ${minLength} characters`);
      }

      if (originalInput[this.path].inputPassword !== originalInput[this.path].inputConfirm) {
        return addFieldValidationError('Passwords do not match');
      }
    });
  }

}

exports.default = PasswordController;
