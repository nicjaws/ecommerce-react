'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@emotion/core');
var fields = require('@arch-ui/fields');
var input = require('@arch-ui/input');
var alert = require('@arch-ui/alert');
require('react-day-picker/dist/style.css');
var reactDayPicker = require('react-day-picker');
var dateFns = require('date-fns');

/** @jsx jsx */

const CalendarDayField = ({
  autoFocus,
  field,
  value,
  errors,
  onChange,
  isDisabled
}) => {
  const htmlID = `ks-daypicker-${field.path}`;

  const handleDayClick = day => onChange(dateFns.formatISO(day, {
    representation: 'date'
  }));

  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(fields.FieldInput, null, core.jsx(reactDayPicker.DayPicker, {
    disabled: [day => isDisabled || field.config.dateTo && dateFns.compareAsc(day, dateFns.parseISO(field.config.dateTo)) === 1 || field.config.dateTo && dateFns.compareAsc(dateFns.parseISO(field.config.dateFrom), day) === 1],
    selected: dateFns.isValid(dateFns.parseISO(value)) ? dateFns.parseISO(value) : undefined,
    onDayClick: handleDayClick
  })), core.jsx(fields.FieldInput, null, core.jsx(input.Input, {
    id: htmlID,
    autoFocus: autoFocus,
    onKeyDown: e => {
      // There is a strange bug where after interacting with the day picker
      // and then pressing enter on the input the value is changed to the start
      // of the month. I think this is bug with the day picker.
      // The following is a work-around:
      if (e.key === 'Enter') {
        e.preventDefault();
      }
    },
    onChange: e => {
      // Tiny bit of date format normalisation for convenience
      const normalisedValue = e.target.value.replace('/', '-').replace('\\', '-');
      const parsedValue = dateFns.parseISO(normalisedValue);

      if (normalisedValue.length === 10 && dateFns.isValid(parsedValue)) {
        handleDayClick(parsedValue);
      } else {
        onChange(normalisedValue);
      }
    },
    disabled: isDisabled,
    css: {
      color: dateFns.isValid(dateFns.parseISO(value)) ? undefined : 'darkred'
    },
    value: value
  })), errors.map(({
    message,
    data
  }) => core.jsx(alert.Alert, {
    appearance: "danger",
    key: message
  }, message, data ? ` - ${JSON.stringify(data)}` : null)));
};

exports.default = CalendarDayField;
