'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectSpread2 = require('../../../../../dist/objectSpread2-a7e51403.cjs.dev.js');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Controller_dist_fields = require('../../../../../Controller/dist/fields.cjs.dev.js');
require('@babel/runtime/helpers/classCallCheck');
require('lodash.isequal');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);

class CheckboxController extends Controller_dist_fields['default'] {
  constructor(_ref, ...args) {
    let {
      defaultValue = false
    } = _ref,
        config = _objectWithoutProperties__default['default'](_ref, ["defaultValue"]);

    super(objectSpread2._objectSpread2(objectSpread2._objectSpread2({}, config), {}, {
      defaultValue
    }), ...args);

    _defineProperty__default['default'](this, "serialize", data => data[this.path]);

    _defineProperty__default['default'](this, "deserialize", data => data[this.path]);

    _defineProperty__default['default'](this, "getFilterGraphQL", ({
      type,
      value
    }) => {
      const key = type === 'is' ? `${this.path}` : `${this.path}_${type}`;
      return {
        [key]: value
      };
    });

    _defineProperty__default['default'](this, "getFilterLabel", ({
      label
    }) => {
      return `${this.label} ${label.toLowerCase()}`;
    });

    _defineProperty__default['default'](this, "formatFilter", ({
      label,
      value
    }) => {
      return `${this.getFilterLabel({
        label
      })}: ${value}`;
    });

    _defineProperty__default['default'](this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is',
      getInitialValue: () => true
    }, {
      type: 'not',
      label: 'Is not',
      getInitialValue: () => true
    }]);
  }

}

exports.default = CheckboxController;
