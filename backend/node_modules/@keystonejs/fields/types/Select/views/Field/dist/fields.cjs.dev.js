'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var core = require('@emotion/core');
var fields = require('@arch-ui/fields');
var Select = require('@arch-ui/select');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var Select__default = /*#__PURE__*/_interopDefault(Select);

const SelectField = ({
  onChange,
  autoFocus,
  field,
  value: serverValue,
  renderContext,
  errors,
  isDisabled
}) => {
  const handleChange = option => {
    onChange(option ? option.value : null);
  };

  const value = field.options.find(i => i.value === serverValue);
  const htmlID = `ks-input-${field.path}`;
  const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
  const error = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
  const selectProps = renderContext === 'dialog' ? {
    menuPortalTarget: document.body,
    menuShouldBlockScroll: true
  } : null;
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(fields.FieldInput, null, core.jsx("div", {
    css: {
      flex: 1
    }
  }, core.jsx(Select__default['default'], _extends__default['default']({
    autoFocus: autoFocus,
    value: canRead ? value : undefined,
    placeholder: canRead ? undefined : error.message,
    options: field.options,
    onChange: handleChange,
    isClearable: true,
    id: `react-select-${htmlID}`,
    inputId: htmlID,
    instanceId: htmlID,
    isDisabled: isDisabled
  }, selectProps)))));
};

exports.default = SelectField;
