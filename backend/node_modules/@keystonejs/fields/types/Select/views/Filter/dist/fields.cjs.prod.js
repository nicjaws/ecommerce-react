'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var objectSpread2 = require('../../../../../dist/objectSpread2-4dba075b.cjs.prod.js');
var _extends = require('@babel/runtime/helpers/extends');
var core = require('@emotion/core');
var React = require('react');
var Select = require('@arch-ui/select');
var options = require('@arch-ui/options');
var filters = require('@arch-ui/filters');
var theme = require('@arch-ui/theme');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var Select__default = /*#__PURE__*/_interopDefault(Select);

const EventCatcher = props => core.jsx("div", _extends__default['default']({
  onClick: e => {
    e.preventDefault();
    e.stopPropagation();
  }
}, props));

const SelectWrapper = props => core.jsx("div", _extends__default['default']({
  css: {
    marginTop: theme.gridSize * 2
  }
}, props));

const SelectFilterView = ({
  innerRef,
  field,
  value,
  onChange
}) => {
  const handleRadioChange = newValue => {
    const inverted = newValue === 'does_match' ? false : true;
    onChange(objectSpread2._objectSpread2(objectSpread2._objectSpread2({}, value), {}, {
      inverted
    }));
  };

  const handleSelectChange = newValue => {
    const options = [...(newValue || [])]; // ensure consistent data shape

    onChange(objectSpread2._objectSpread2(objectSpread2._objectSpread2({}, value), {}, {
      options
    }));
  };

  const radioValue = value.inverted ? 'does_not_match' : 'does_match';
  const selectProps = {
    innerRef: innerRef,
    onChange: handleSelectChange,
    options: field.options,
    placeholder: 'Select...',
    value: value.options,
    isMulti: true
  };
  return core.jsx(React.Fragment, null, core.jsx(filters.RadioGroup, {
    onChange: handleRadioChange,
    value: radioValue
  }, core.jsx(filters.Radio, {
    value: "does_match"
  }, "Matches"), core.jsx(filters.Radio, {
    value: "does_not_match"
  }, "Does not match")), core.jsx(SelectWrapper, null, field.options.length > 8 ? core.jsx(EventCatcher, null, core.jsx(Select__default['default'], _extends__default['default']({
    menuPortalTarget: document.body
  }, selectProps, {
    components: {
      Option: CheckMarkOptionSelect
    }
  }))) : core.jsx(options.Options, _extends__default['default']({
    displaySearch: false
  }, selectProps, {
    components: {
      Option: CheckMarkOption
    }
  }))));
};

const CheckMarkOption = (_ref) => {
  let {
    children
  } = _ref,
      props = _objectWithoutProperties__default['default'](_ref, ["children"]);

  return core.jsx(options.OptionPrimitive, props, core.jsx("span", null, children), core.jsx(options.CheckMark, {
    isFocused: props.isFocused,
    isSelected: props.isSelected
  }));
}; // TODO: figure out a better way to give options padding in the the dropdown


const CheckMarkOptionSelect = props => core.jsx(CheckMarkOption, _extends__default['default']({}, props, {
  css: {
    paddingLeft: `${theme.gridSize}px`,
    paddingRight: `${theme.gridSize}px`
  }
}));

exports.default = SelectFilterView;
