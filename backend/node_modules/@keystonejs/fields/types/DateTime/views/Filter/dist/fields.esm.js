import { _ as _objectSpread2 } from '../../../../../dist/objectSpread2-ff1b253c.esm.js';
import React from 'react';
import { formatISO } from 'date-fns';
import { DayTimePicker } from '@arch-ui/day-picker';
import { DateTime } from 'luxon';

function parseDate(value) {
  // why do we use luxon instead of date-fns/native Dates?
  // native Dates don't allow you to set custom timezones
  // yes, you can parse other timezones but they're converted
  // to the local time zone
  const dt = DateTime.fromISO(value, {
    setZone: true
  });
  return {
    date: dt.toFormat('yyyy-LL-dd'),
    time: dt.toFormat('HH:mm:ss.SSS'),
    offset: dt.toFormat('ZZ')
  };
}
function stringifyDate(date) {
  return `${date.date}T${date.time}${date.offset}`;
}

const DateTimeFilterView = props => {
  const parsedDate = props.value ? parseDate(props.value) : parseDate(new Date().toISOString());

  const handleDayChange = day => {
    props.onChange(stringifyDate(_objectSpread2(_objectSpread2({}, parsedDate), {}, {
      date: formatISO(day, {
        representation: 'date'
      })
    })));
  };

  const handleTimeChange = event => {
    props.onChange(stringifyDate(_objectSpread2(_objectSpread2({}, parsedDate), {}, {
      time: event.target.value
    })));
  };

  const handleOffsetChange = offset => {
    props.onChange(stringifyDate(_objectSpread2(_objectSpread2({}, parsedDate), {}, {
      offset
    })));
  };

  if (!props.filter) return null;
  const {
    yearRangeFrom,
    yearRangeTo,
    yearPickerType
  } = props.field.config;
  return /*#__PURE__*/React.createElement(DayTimePicker, _objectSpread2(_objectSpread2({}, parsedDate), {}, {
    htmlID: 'calendar-day-filter',
    handleDayChange,
    handleTimeChange,
    handleOffsetChange,
    yearRangeFrom,
    yearRangeTo,
    yearPickerType
  }));
};

export default DateTimeFilterView;
