'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectSpread2 = require('../../../../../dist/objectSpread2-4dba075b.cjs.prod.js');
var React = require('react');
var dateFns = require('date-fns');
var dayPicker = require('@arch-ui/day-picker');
var luxon = require('luxon');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function parseDate(value) {
  // why do we use luxon instead of date-fns/native Dates?
  // native Dates don't allow you to set custom timezones
  // yes, you can parse other timezones but they're converted
  // to the local time zone
  const dt = luxon.DateTime.fromISO(value, {
    setZone: true
  });
  return {
    date: dt.toFormat('yyyy-LL-dd'),
    time: dt.toFormat('HH:mm:ss.SSS'),
    offset: dt.toFormat('ZZ')
  };
}
function stringifyDate(date) {
  return `${date.date}T${date.time}${date.offset}`;
}

const DateTimeFilterView = props => {
  const parsedDate = props.value ? parseDate(props.value) : parseDate(new Date().toISOString());

  const handleDayChange = day => {
    props.onChange(stringifyDate(objectSpread2._objectSpread2(objectSpread2._objectSpread2({}, parsedDate), {}, {
      date: dateFns.formatISO(day, {
        representation: 'date'
      })
    })));
  };

  const handleTimeChange = event => {
    props.onChange(stringifyDate(objectSpread2._objectSpread2(objectSpread2._objectSpread2({}, parsedDate), {}, {
      time: event.target.value
    })));
  };

  const handleOffsetChange = offset => {
    props.onChange(stringifyDate(objectSpread2._objectSpread2(objectSpread2._objectSpread2({}, parsedDate), {}, {
      offset
    })));
  };

  if (!props.filter) return null;
  const {
    yearRangeFrom,
    yearRangeTo,
    yearPickerType
  } = props.field.config;
  return /*#__PURE__*/React__default['default'].createElement(dayPicker.DayTimePicker, objectSpread2._objectSpread2(objectSpread2._objectSpread2({}, parsedDate), {}, {
    htmlID: 'calendar-day-filter',
    handleDayChange,
    handleTimeChange,
    handleOffsetChange,
    yearRangeFrom,
    yearRangeTo,
    yearPickerType
  }));
};

exports.default = DateTimeFilterView;
