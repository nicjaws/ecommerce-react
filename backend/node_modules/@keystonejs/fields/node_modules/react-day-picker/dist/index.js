(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("date-fns"), require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["date-fns", "react"], factory);
	else if(typeof exports === 'object')
		exports["DayPicker"] = factory(require("date-fns"), require("react"));
	else
		root["DayPicker"] = factory(root["DateFns"], root["React"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__259__, __WEBPACK_EXTERNAL_MODULE__698__) {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 334:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "DayPicker": () => /* reexport */ DayPicker,
  "defaultClassNames": () => /* reexport */ defaultClassNames,
  "defaultModifiers": () => /* reexport */ defaultModifiers,
  "MonthCaption": () => /* reexport */ MonthCaption,
  "getCaptionProps": () => /* reexport */ getCaptionProps,
  "Day": () => /* reexport */ Day,
  "getDayProps": () => /* reexport */ getDayProps,
  "Navigation": () => /* reexport */ Navigation,
  "getNavigation": () => /* reexport */ getNavigation,
  "getNavigationProps": () => /* reexport */ getNavigationProps,
  "WeekNumber": () => /* reexport */ WeekNumber,
  "useInput": () => /* reexport */ useInput,
  "useModifiers": () => /* reexport */ useModifiers
});

// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external_root_React_commonjs2_react_commonjs_react_amd_react_ = __webpack_require__(698);
var external_root_React_commonjs2_react_commonjs_react_amd_react_default = /*#__PURE__*/__webpack_require__.n(external_root_React_commonjs2_react_commonjs_react_amd_react_);

// EXTERNAL MODULE: external {"root":"DateFns","commonjs2":"date-fns","commonjs":"date-fns","amd":"date-fns"}
var external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_ = __webpack_require__(259);

// CONCATENATED MODULE: ./src/components/Head/getWeekdaysNames.ts

/**
 * Return the name of the weekdays according to the formatting function.
 */
function getWeekdaysNames(locale, format) {
    var start = external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfWeek(new Date(), { locale: locale });
    var names = [];
    for (var i = 0; i < 7; i++) {
        var day = external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays(start, i);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        names.push(format(day, { locale: locale }));
    }
    return names;
}

// CONCATENATED MODULE: ./src/components/Head/Head.tsx


/**
 * Render the head of the month table, including the weekday names (Mon, Tue,
 * etc.).
 * @category Components
 */
function Head(props) {
    var locale = props.locale, showWeekNumber = props.showWeekNumber, dayPickerProps = props.dayPickerProps;
    var classNames = dayPickerProps.classNames, styles = dayPickerProps.styles, formatWeekdayName = dayPickerProps.formatWeekdayName;
    var weekdayNames = getWeekdaysNames(locale, formatWeekdayName);
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("thead", { style: styles === null || styles === void 0 ? void 0 : styles.head, className: classNames === null || classNames === void 0 ? void 0 : classNames.head },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("tr", { style: styles === null || styles === void 0 ? void 0 : styles.headRow, className: classNames === null || classNames === void 0 ? void 0 : classNames.headRow },
            showWeekNumber && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("th", { style: styles === null || styles === void 0 ? void 0 : styles.headWeekNumber, className: classNames === null || classNames === void 0 ? void 0 : classNames.headWeekNumber })),
            weekdayNames.map(function (name, i) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("th", { key: i, scope: "col", style: styles === null || styles === void 0 ? void 0 : styles.headWeekName, className: classNames === null || classNames === void 0 ? void 0 : classNames.headWeekName }, name)); }))));
}

// CONCATENATED MODULE: ./src/components/Head/index.ts


// CONCATENATED MODULE: ./src/components/WeekRow/WeekRow.tsx


/**
 * Render a week row.
 *
 * @category Components
 * @private
 */
function WeekRow(props) {
    var weekNumber = props.weekNumber, week = props.week, currentMonth = props.currentMonth, dayPickerProps = props.dayPickerProps;
    var showWeekNumber = dayPickerProps.showWeekNumber, classNames = dayPickerProps.classNames, styles = dayPickerProps.styles, components = dayPickerProps.components;
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    var _a = components, Day = _a.Day, WeekNumber = _a.WeekNumber;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("tr", { className: classNames === null || classNames === void 0 ? void 0 : classNames.week, style: styles === null || styles === void 0 ? void 0 : styles.week },
        showWeekNumber && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("th", { className: classNames === null || classNames === void 0 ? void 0 : classNames.weekWeeknumber, style: styles === null || styles === void 0 ? void 0 : styles.weekWeeknumber },
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(WeekNumber, { days: week, number: Number(weekNumber), dayPickerProps: dayPickerProps }))),
        week.map(function (day) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("td", { className: classNames === null || classNames === void 0 ? void 0 : classNames.weekDay, style: styles === null || styles === void 0 ? void 0 : styles.weekDay, key: (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getUnixTime)(day) },
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Day, { day: day, dayPickerProps: dayPickerProps, currentMonth: currentMonth }))); })));
}

// CONCATENATED MODULE: ./src/components/WeekRow/index.tsx


// CONCATENATED MODULE: ./src/components/MonthTable/getOutsideStartDays.ts

/**
 * Return the outside starting days for the given day.
 */
function getOutsideStartDays(day, props) {
    var locale = props.locale;
    var days = [];
    var firstDayOfWeek = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfWeek)(day, { locale: locale });
    var startDiff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(day, firstDayOfWeek);
    for (var i = 0; i < startDiff; i++) {
        var newDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(firstDayOfWeek, i);
        days.push(newDay);
    }
    return days;
}

// CONCATENATED MODULE: ./src/components/MonthTable/getOutsideEndDays.ts

/**
 * Return the outside ending days for the given day.
 */
function getOutsideEndDays(day, props) {
    var locale = props.locale;
    var days = [];
    var lastDayOfWeek = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.endOfWeek)(day, { locale: locale });
    var endDiff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(lastDayOfWeek, day);
    for (var i = 1; i <= endDiff; i++) {
        var dayDate = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(day, i);
        days.push(dayDate);
    }
    return days;
}

// CONCATENATED MODULE: ./src/components/MonthTable/getWeeks.ts



/**
 * Return the weeks belonging to the given month.
 */
function getWeeks(month, props) {
    var locale = props.locale, fixedWeeks = props.fixedWeeks;
    var monthStart = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(month);
    var monthEnd = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.endOfMonth)(month);
    var diff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(monthEnd, monthStart);
    var weeks = {};
    var lastWeekStr = '';
    for (var i = 0; i <= diff; i++) {
        var date = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(monthStart, i);
        var week = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getWeek)(date, { locale: locale });
        if (week === 1 && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getMonth)(date) === 11) {
            week = 53;
        }
        var weekStr = week.toString();
        if (!weeks[weekStr]) {
            var startDays = getOutsideStartDays(date, props);
            // Create a new week by adding outside start days
            weeks[weekStr] = startDays;
        }
        weeks[weekStr].push(date);
        lastWeekStr = weekStr;
    }
    var lastWeek = weeks[lastWeekStr];
    var lastDay = lastWeek[lastWeek.length - 1];
    var endDays = getOutsideEndDays(lastDay, props);
    weeks[lastWeekStr] = lastWeek.concat(endDays);
    // add extra weeks to the month, up to 6 weeks
    if (fixedWeeks) {
        lastWeek = weeks[lastWeekStr];
        var lastWeekDate = lastWeek[lastWeek.length - 1];
        var weeksInMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getWeeksInMonth)(month, { locale: locale });
        if (weeksInMonth < 6) {
            var diffDays = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addWeeks)(lastWeekDate, 6 - weeksInMonth), lastWeekDate);
            for (var i = 0; i < diffDays; i++) {
                var date = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(lastWeekDate, i + 1);
                var week = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getWeek)(date, { locale: locale });
                if (week === 1 && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getMonth)(month) === 11) {
                    week = 53;
                }
                if (!weeks[week]) {
                    weeks[week] = [];
                }
                weeks[week.toString()].push(date);
            }
        }
    }
    return weeks;
}

// CONCATENATED MODULE: ./src/components/MonthTable/MonthTable.tsx




/**
 * Render the month table.
 * @category Components
 */
function MonthTable(props) {
    var month = props.month, dayPickerProps = props.dayPickerProps;
    var locale = dayPickerProps.locale, classNames = dayPickerProps.classNames, styles = dayPickerProps.styles;
    var showCaption = dayPickerProps.showCaption, showHead = dayPickerProps.showHead;
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    var MonthCaption = dayPickerProps.components.MonthCaption;
    var weeks = getWeeks(month, dayPickerProps);
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", { className: classNames === null || classNames === void 0 ? void 0 : classNames.month },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("table", { className: classNames === null || classNames === void 0 ? void 0 : classNames.monthTable, style: styles === null || styles === void 0 ? void 0 : styles.monthTable },
            showCaption && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(MonthCaption, { month: month, dayPickerProps: dayPickerProps })),
            showHead && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Head
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            , { 
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                locale: locale, showWeekNumber: dayPickerProps.showWeekNumber, dayPickerProps: dayPickerProps })),
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("tbody", { className: classNames === null || classNames === void 0 ? void 0 : classNames.monthTbody, style: styles === null || styles === void 0 ? void 0 : styles.monthTbody }, Object.keys(weeks).map(function (weekNumber) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(WeekRow, { currentMonth: month, key: weekNumber, week: weeks[weekNumber], weekNumber: Number(weekNumber), dayPickerProps: dayPickerProps })); })))));
}

// CONCATENATED MODULE: ./src/components/MonthTable/index.ts


// CONCATENATED MODULE: ./src/components/Months/getMonths.ts

/**
 * Get the months to render in DayPicker according to the passed
 * `numberOfMonths` and other month-related props.
 */
function getMonths(props) {
    var _a = props.month, month = _a === void 0 ? new Date() : _a, _b = props.numberOfMonths, numberOfMonths = _b === void 0 ? 1 : _b, toMonth = props.toMonth, fromMonth = props.fromMonth, reverseMonths = props.reverseMonths;
    var start = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(month);
    var end = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(start, numberOfMonths));
    var monthsDiff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInMonths)(end, start);
    var months = [];
    for (var i = 0; i < monthsDiff; i++) {
        var nextMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(start, i);
        if (toMonth && nextMonth > (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(toMonth)) {
            // Skip months after toMonth
            continue;
        }
        if (fromMonth && nextMonth < (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromMonth)) {
            // Skip months before fromMonth
            continue;
        }
        months.push(nextMonth);
    }
    if (reverseMonths) {
        months = months.reverse();
    }
    return months;
}

// CONCATENATED MODULE: ./src/components/Months/filterUndefinedProps.ts
/**
 * Filter the undefined props of `obj`.
 */
function filterUndefinedProps(obj) {
    if (!obj)
        return {};
    var clean = {};
    Object.entries(obj).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        if (typeof value === 'undefined') {
            return;
        }
        clean[key.toString()] = value;
    });
    return clean;
}

// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};
function formatDistance(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
}
// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function (dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}
// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ const _lib_formatLong = (formatLong);
// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}
// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}
// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

function ordinalNumber(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
}

var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ const _lib_localize = (localize);
// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var matchResult = string.match(args.matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);

    if (!parseResult) {
      return null;
    }

    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}
// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var value;

    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
      value = findIndex(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    } else {
      value = findKey(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    }

    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
}
// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/en-US/_lib/match/index.js


var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ const _lib_match = (match);
// CONCATENATED MODULE: ../../node_modules/date-fns/esm/locale/en-US/index.js





/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */

var locale = {
  code: 'en-US',
  formatDistance: formatDistance,
  formatLong: _lib_formatLong,
  formatRelative: formatRelative,
  localize: _lib_localize,
  match: _lib_match,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const en_US = (locale);
// CONCATENATED MODULE: ./src/components/MonthCaption/getCaptionProps.ts
/**
 * Return props for creating a [[MonthCaption]] component.
 *
 * #### Usage
 *
 * Use this helper when swizzling the caption using the
 * [[DayPickerProps.components]] prop.
 *
 * ```jsx
 * function MonthCaption({ dayPickerProps }): JSX.Element {
 *   const { containerProps } = getCaptionProps(dayPickerProps);
 *   return (
 *     <caption {...containerProps}>
 *       Something inside the caption
 *     </caption>;
 *   )
 * }
 * <DayPicker components={{ MonthCaption }} />
 * ```
 */
function getCaptionProps(dayPickerProps) {
    var styles = dayPickerProps.styles, classNames = dayPickerProps.classNames;
    return {
        containerProps: {
            className: classNames === null || classNames === void 0 ? void 0 : classNames.caption,
            style: styles === null || styles === void 0 ? void 0 : styles.caption
        }
    };
}

// CONCATENATED MODULE: ./src/components/MonthCaption/MonthCaption.tsx
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};


/**
 * Renders the caption of the month.
 *
 * @category Components
 */
function MonthCaption(props) {
    var _a, _b;
    var containerProps = getCaptionProps(props.dayPickerProps).containerProps;
    var locale = props.dayPickerProps.locale;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("caption", __assign({}, containerProps), (_b = (_a = props.dayPickerProps).formatCaption) === null || _b === void 0 ? void 0 : _b.call(_a, props.month, { locale: locale })));
}

// CONCATENATED MODULE: ./src/components/Day/getDayProps.ts
var getDayProps_assign = (undefined && undefined.__assign) || function () {
    getDayProps_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return getDayProps_assign.apply(this, arguments);
};
/**
 * Return props for creating a [[Day]] component.
 */
function getDayProps(day, modifiers, props) {
    var classNames = props.classNames, daysClassNames = props.daysClassNames, daysStyles = props.daysStyles, onDayClick = props.onDayClick, styles = props.styles;
    var onClick;
    if (modifiers.interactive && onDayClick) {
        onClick = function (e) {
            e.stopPropagation();
            e.preventDefault();
            onDayClick(day, modifiers, e);
        };
    }
    var style = getDayProps_assign({}, styles === null || styles === void 0 ? void 0 : styles.day);
    if (styles) {
        // Apply the custom inline-styles
        Object.keys(modifiers).forEach(function (modifier) {
            style = getDayProps_assign(getDayProps_assign({}, style), styles[modifier]);
        });
    }
    if (daysStyles) {
        // Apply the styles for the modifier
        Object.keys(modifiers).forEach(function (modifier) {
            style = getDayProps_assign(getDayProps_assign({}, style), daysStyles[modifier]);
        });
    }
    var className = [];
    if (classNames && classNames.day) {
        className.push(classNames.day);
        if (daysClassNames) {
            Object.keys(modifiers)
                .filter(function (modifier) { return !!modifiers[modifier]; })
                .forEach(function (modifier) {
                if (modifier && classNames[modifier]) {
                    className.push(classNames[modifier]);
                }
                if (daysClassNames && daysClassNames[modifier]) {
                    className.push(daysClassNames[modifier]);
                }
            });
        }
    }
    var dataProps = {};
    Object.entries(modifiers)
        .filter(function (value) { return Boolean(value); })
        .forEach(function (_a) {
        var modifier = _a[0], value = _a[1];
        dataProps["data-rdp-" + modifier] = value;
    });
    var containerProps = getDayProps_assign({ 'aria-disabled': !modifiers.interactive || undefined, 'aria-hidden': !modifiers.hidden || undefined, disabled: Boolean(modifiers.disabled) || undefined, onClick: onClick,
        style: style, className: className.join(' ') }, dataProps);
    var wrapperProps = {
        className: classNames === null || classNames === void 0 ? void 0 : classNames.dayWrapper,
        styles: styles === null || styles === void 0 ? void 0 : styles.dayWrapper
    };
    return { containerProps: containerProps, wrapperProps: wrapperProps, modifiers: modifiers };
}

// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultModifiers.ts
/**
 * Default modifiers.
 */
var defaultModifiers = {
    disabled: false,
    hidden: false,
    interactive: true,
    aftermonth: false,
    beforemonth: false,
    selected: false,
    today: false
};

// CONCATENATED MODULE: ./src/hooks/modifiers-utils/matchModifier.ts

/**
 * Return true if `day1` is after `day2`.
 */
function isDayAfter(day1, day2) {
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(day1, day2) > 0;
}
/**
 * Return true if `day1` is before `day2`.
 */
function isDayBefore(day1, day2) {
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(day1, day2) < 0;
}
/**
 * Return true if `day` matches the given [[DayMatcher]].
 */
function matchDate(day, matcher) {
    if (!(matcher instanceof Date))
        return false;
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(day, matcher);
}
/**
 * Returns true if the day is in the range specified by the [[DayMatcher]].
 */
function matchDayInRange(day, matcher) {
    if (!('from' in matcher) || !('to' in matcher))
        return false;
    var matchDayT = {
        from: matcher.from,
        to: matcher.to
    };
    if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(matchDayT.from, matchDayT.to) <= 0)
        return false;
    return isDayBefore(day, matcher.to) && isDayAfter(day, matcher.from);
}
/**
 * TODO: write docs
 */
function matchDayBefore(day, matcher) {
    if ('after' in matcher || !('before' in matcher))
        return false;
    var matchDayT = { before: matcher.before };
    return isDayBefore(day, matchDayT.before);
}
/**
 * TODO: write docs
 */
function matchDayAfter(day, matcher) {
    if ('before' in matcher || !('after' in matcher))
        return false;
    var matchDayT = { after: matcher.after };
    return isDayAfter(day, matchDayT.after);
}
/**
 * TODO: write docs
 */
function matchDayBetween(day, matcher) {
    if (!('after' in matcher) || !('before' in matcher))
        return false;
    var matchDayT = {
        before: matcher.before,
        after: matcher.after
    };
    if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(matchDayT.before, matchDayT.after) <= 0)
        return false;
    return isDayAfter(day, matcher.after) && isDayBefore(day, matcher.before);
}
/**
 * TODO: write docs
 */
function matchDayOfWeek(day, matcher) {
    if (!('daysOfWeek' in matcher))
        return false;
    return matcher.daysOfWeek.includes(day.getDay());
}
/**
 * TODO: write docs
 */
function matchFunction(day, matcher) {
    if (!(matcher instanceof Function))
        return false;
    return matcher(day);
}
/**
 * Return `true` if a day matches a day matcher.
 */
function matchDay(day, matcher) {
    if (!matcher)
        return false;
    var matchers;
    if (Array.isArray(matcher)) {
        matchers = matcher;
    }
    else {
        matchers = [matcher];
    }
    return matchers.some(function (dayMatcher) {
        if (!dayMatcher)
            return false;
        return (matchDate(day, dayMatcher) ||
            matchDayInRange(day, dayMatcher) ||
            matchDayBefore(day, dayMatcher) ||
            matchDayAfter(day, dayMatcher) ||
            matchDayBetween(day, dayMatcher) ||
            matchDayOfWeek(day, dayMatcher) ||
            matchFunction(day, dayMatcher));
    });
}

// CONCATENATED MODULE: ./src/hooks/modifiers-utils/getMatchingModifiers.ts

var reduceCallback = function (day, modifiers) { return function (previousValue, key) {
    var modifier = modifiers[key];
    if (matchDay(day, modifier)) {
        previousValue.push(key);
    }
    return previousValue;
}; };
/**
 * Given a date and a list of modifiers, return the names of the modifiers matching that day.
 */
function getMatchingModifiers(day, modifiers) {
    return Object.keys(modifiers).reduce(reduceCallback(day, modifiers), []);
}

// CONCATENATED MODULE: ./src/hooks/modifiers-utils/getModifiersFromProps.ts
/**
 * Return the `modifiers` prop including the modifiers from shortcut-props
 * (`selected`, `disabled` and `hidden`)
 */
function getModifiersFromProps(props) {
    var modifiers = Object.assign({}, props.days);
    if (props.selected) {
        modifiers.selected = props.selected;
    }
    if (props.disabled) {
        modifiers.disabled = props.disabled;
    }
    if (props.hidden) {
        modifiers.hidden = props.hidden;
    }
    return modifiers;
}

// CONCATENATED MODULE: ./src/hooks/modifiers-utils/getOutsideModifier.ts

/**
 * Return the modifier for days outside the current month.
 */
function getOutsideModifier(day, currentMonth) {
    if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isBefore)(day, (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(currentMonth)))
        return 'beforemonth';
    else if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isAfter)(day, (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.endOfMonth)(currentMonth)))
        return 'aftermonth';
    return undefined;
}

// CONCATENATED MODULE: ./src/hooks/useModifiers.ts
var useModifiers_assign = (undefined && undefined.__assign) || function () {
    useModifiers_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return useModifiers_assign.apply(this, arguments);
};





/**
 * Get the modifiers for the specified day.
 *
 * @category Hooks
 */
function useModifiers(day, currentMonth, props) {
    var modifiers = useModifiers_assign({}, defaultModifiers);
    modifiers.today = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isToday)(day);
    var outsideModifier = getOutsideModifier(day, currentMonth);
    if (outsideModifier) {
        modifiers[outsideModifier] = true;
    }
    var isOutside = modifiers.beforemonth || modifiers.aftermonth;
    modifiers.hidden = isOutside && !props.showOutsideDays;
    modifiers.disabled = isOutside && !props.enableOutsideDaysClick;
    var modifiersFromProps = getModifiersFromProps(props);
    var modifiersArray = getMatchingModifiers(day, modifiersFromProps);
    modifiersArray.forEach(function (modifier) { return (modifiers[modifier] = true); });
    if (!props.onDayClick || modifiers.hidden || modifiers.disabled) {
        modifiers.interactive = false;
    }
    return modifiers;
}

// CONCATENATED MODULE: ./src/components/Day/Day.tsx
var Day_assign = (undefined && undefined.__assign) || function () {
    Day_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Day_assign.apply(this, arguments);
};



/**
 * The `Day` component renders the content of the day cell. It renders a button
 * if the day is interactive (i.e. it is clickable).
 *
 * This component can be [[include:swizzling.md]].
 *
 * @category Components
 */
function Day(props) {
    var day = props.day, dayPickerProps = props.dayPickerProps, currentMonth = props.currentMonth;
    var locale = dayPickerProps.locale, formatDay = dayPickerProps.formatDay;
    var modifiers = useModifiers(day, currentMonth, dayPickerProps);
    if (modifiers.hidden) {
        return external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("span", { "aria-hidden": true });
    }
    var _a = getDayProps(day, modifiers, dayPickerProps), containerProps = _a.containerProps, wrapperProps = _a.wrapperProps;
    var Component = modifiers.interactive ? 'button' : 'span';
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Component, Day_assign({}, containerProps),
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("span", Day_assign({}, wrapperProps), formatDay === null || formatDay === void 0 ? void 0 : formatDay(day, { locale: locale }))));
}

// CONCATENATED MODULE: ./src/components/Day/index.ts



// CONCATENATED MODULE: ./src/components/WeekNumber/WeekNumber.tsx

/**
 * Render the number of the week when [[showWeekNumber]] is enabled.
 *
 * @category Components
 */
function WeekNumber(props) {
    var _a = props.dayPickerProps, formatWeekNumber = _a.formatWeekNumber, locale = _a.locale, classNames = _a.classNames, styles = _a.styles;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("span", { className: classNames === null || classNames === void 0 ? void 0 : classNames.weekNumber, style: styles === null || styles === void 0 ? void 0 : styles.weekNumber }, formatWeekNumber && formatWeekNumber(props.number, { locale: locale })));
}

// CONCATENATED MODULE: ./src/components/WeekNumber/index.ts


// CONCATENATED MODULE: ./src/components/Navigation/getNavigation.ts

/**
 * Return the next and the previous months for the navigation component,
 * according to the DayPicker props.
 *
 *
 */
function getNavigation(props) {
    var fromMonth = props.fromMonth, toMonth = props.toMonth, month = props.month, _a = props.numberOfMonths, numberOfMonths = _a === void 0 ? 1 : _a, pagedNavigation = props.pagedNavigation;
    var add = pagedNavigation ? numberOfMonths : 1;
    var currentMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(month || new Date());
    var prevMonth;
    if (!fromMonth || currentMonth > (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromMonth)) {
        prevMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(currentMonth, add * -1);
    }
    var nextMonth;
    if (!toMonth ||
        (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(currentMonth, numberOfMonths) <= (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(toMonth)) {
        nextMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(currentMonth, add);
    }
    return { nextMonth: nextMonth, prevMonth: prevMonth };
}

// CONCATENATED MODULE: ./src/components/Navigation/getNavigationProps.ts
/**
 * Return the props for the Navigation component and its children.
 *
 *
 */
function getNavigationProps(props) {
    var classNames = props.classNames, styles = props.styles;
    var containerProps = { className: classNames === null || classNames === void 0 ? void 0 : classNames.nav, style: styles === null || styles === void 0 ? void 0 : styles.nav };
    var nextProps = {
        className: classNames === null || classNames === void 0 ? void 0 : classNames.navNext,
        style: styles === null || styles === void 0 ? void 0 : styles.navNext
    };
    var prevProps = {
        className: classNames === null || classNames === void 0 ? void 0 : classNames.navPrev,
        style: styles === null || styles === void 0 ? void 0 : styles.navPrev
    };
    return {
        containerProps: containerProps,
        nextProps: nextProps,
        prevProps: prevProps
    };
}

// CONCATENATED MODULE: ./src/components/Navigation/Navigation.tsx
var Navigation_assign = (undefined && undefined.__assign) || function () {
    Navigation_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Navigation_assign.apply(this, arguments);
};



/**
 * Renders the buttons to navigate between months.
 *
 * @category Components
 */
function Navigation(props) {
    var dayPickerProps = props.dayPickerProps;
    var onMonthChange = dayPickerProps.onMonthChange, onPrevClick = dayPickerProps.onPrevClick, onNextClick = dayPickerProps.onNextClick;
    var _a = getNavigation(dayPickerProps), nextMonth = _a.nextMonth, prevMonth = _a.prevMonth;
    var _b = getNavigationProps(dayPickerProps), containerProps = _b.containerProps, nextProps = _b.nextProps, prevProps = _b.prevProps;
    var handlePrevClick = function (e) {
        if (!prevMonth)
            return;
        if (onMonthChange)
            onMonthChange(prevMonth, e);
        if (onPrevClick)
            onPrevClick(prevMonth, e);
    };
    var handleNextClick = function (e) {
        if (!nextMonth)
            return;
        if (onMonthChange)
            onMonthChange(nextMonth, e);
        if (onNextClick)
            onNextClick(nextMonth, e);
    };
    var prevLabel = dayPickerProps.prevLabel, nextLabel = dayPickerProps.nextLabel;
    var prevButton = prevLabel && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("button", Navigation_assign({}, prevProps, { key: "prev", disabled: !prevMonth, type: "button", onClick: handlePrevClick }), prevLabel));
    var nextButton = nextLabel && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("button", Navigation_assign({}, nextProps, { key: 'next', disabled: !nextMonth, type: "button", onClick: handleNextClick }), nextLabel));
    var buttons = [prevButton, nextButton];
    if (dayPickerProps.dir === 'rtl') {
        buttons = buttons.reverse();
    }
    return external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", Navigation_assign({}, containerProps), buttons);
}

// CONCATENATED MODULE: ./src/components/Navigation/index.ts




// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultClassNames.ts
/**
 * List the default CSS class names. Class names can be overridden using the
 * [[classNames]] prop.
 */
var defaultClassNames = {
    /** Root element */
    root: 'rdp',
    caption: 'rdp-caption',
    // Day Component
    day: 'rdp-day',
    dayWrapper: 'rdp-day_wrapper',
    // Month Component
    month: 'rdp-month',
    monthTable: 'rdp-month_table',
    monthTbody: 'rdp-month_tbody',
    months: 'rdp-months',
    // Head Components
    head: 'rdp-head',
    headRow: 'rdp-head_row',
    headWeekNumber: 'rdp-head_weeknumber',
    headWeekName: 'rdp-head_weekname',
    // Navigation Component
    nav: 'rdp-nav',
    navPrev: 'rdp-nav_prev',
    navNext: 'rdp-nav_next',
    // Week Component
    week: 'rdp-week',
    weekDay: 'rdp-week_day',
    weekWeeknumber: 'rdp-week_weeknumber',
    // WeekNumber component
    weekNumber: 'rdp-weeknumber',
    // Modifiers
    selected: 'rdp-day_selected',
    disabled: 'rdp-day_disabled',
    today: 'rdp-day_today',
    aftermonth: 'rdp-day_outside',
    beforemonth: 'rdp-day_outside'
};

// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultFormatCaption.ts

/**
 * The default function used to format the caption. Use the [[formatCaption]]
 * prop to use another function.
 *
 * @return {string} The month using the `"LLLL Y:` [format
 * string](https://date-fns.org/docs/format).
 * @private
 */
function defaultFormatCaption(month, formatOptions) {
    return external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format(month, 'LLLL Y', formatOptions);
}

// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultFormatDay.ts

/**
 * The default function used to format the day date. Use the [[formatDay]] prop
 * to use another function.
 *
 * @return {string} The day formatted the `"d"` [format
 * string](https://date-fns.org/docs/format).
 * @private
 */
function defaultFormatDay(day, formatOptions) {
    return external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format(day, 'd', formatOptions);
}

// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultFormatWeekNumber.ts
/**
 * The default function used to format the week number. Use the
 * [[formatWeekNumber]] prop to use another function.
 *
 * @return {string} The weeknumber formatted as string.
 * @private
 */
function defaultFormatWeekNumber(weekNumber) {
    return "" + weekNumber;
}

// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultFormatWeekdayName.ts

/**
 * The default function used to format the day. Use the [[formatWeekdayName]]
 * prop to use another function.
 *
 * @return {string} The day formatted the `"E"` [format
 * string](https://date-fns.org/docs/format).
 * @private
 */
function defaultFormatWeekdayName(day, formatOptions) {
    return external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format(day, 'E', formatOptions);
}

// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultProps.ts











/**
 * List the default props used by the [[DayPicker]] component.
 */
var defaultProps = {
    enableOutsideDaysClick: false,
    classNames: defaultClassNames,
    className: '',
    style: {},
    styles: {},
    components: {
        MonthCaption: MonthCaption,
        Day: Day,
        Navigation: Navigation,
        WeekNumber: WeekNumber
    },
    fixedWeeks: false,
    formatCaption: defaultFormatCaption,
    formatDay: defaultFormatDay,
    formatWeekdayName: defaultFormatWeekdayName,
    formatWeekNumber: defaultFormatWeekNumber,
    locale: en_US,
    nextLabel: '▶',
    daysClassNames: {},
    daysStyles: {},
    month: (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(new Date()),
    numberOfMonths: 1,
    pagedNavigation: false,
    prevLabel: '◀',
    reverseMonths: false,
    showCaption: true,
    showHead: true,
    showNavigation: true,
    showOutsideDays: false,
    showWeekNumber: false
};

// CONCATENATED MODULE: ./src/components/Months/Months.tsx
var Months_assign = (undefined && undefined.__assign) || function () {
    Months_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Months_assign.apply(this, arguments);
};






/**
 * Render the months and the navigation.
 * @category Components
 */
function Months(initialProps) {
    if (initialProps === void 0) { initialProps = defaultProps; }
    var _a, _b, _c, _d;
    // Extend props with defaults
    var components = Object.assign({}, defaultProps.components, initialProps.components);
    var classNames = Object.assign({}, defaultProps.classNames, initialProps.classNames);
    var props = Months_assign(Months_assign(Months_assign({}, defaultProps), filterUndefinedProps(initialProps)), { components: components, classNames: classNames });
    // From `style` prop
    var style = Months_assign(Months_assign({}, (_a = props.styles) === null || _a === void 0 ? void 0 : _a.root), props.style);
    // From `className prop`
    var className = [((_b = props.classNames) === null || _b === void 0 ? void 0 : _b.root) || ''];
    if (props.className) {
        className.concat(props.className.split(' '));
    }
    var months = getMonths(props);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    var Navigation = (_c = props.components) === null || _c === void 0 ? void 0 : _c.Navigation;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("div", { className: className.join(' '), style: style, dir: props.dir },
        props.showNavigation && props.onMonthChange && (external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(Navigation, { dayPickerProps: props })),
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("div", { className: (_d = props.classNames) === null || _d === void 0 ? void 0 : _d.months, style: props.styles ? props.styles.month : undefined }, months.map(function (month) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(MonthTable, { key: (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getTime)(month), month: month, dayPickerProps: props })); }))));
}

// CONCATENATED MODULE: ./src/components/Months/index.ts


// CONCATENATED MODULE: ./src/components/DayPicker/DayPicker.tsx
var DayPicker_assign = (undefined && undefined.__assign) || function () {
    DayPicker_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return DayPicker_assign.apply(this, arguments);
};




/**
 * Render a date picker component.
 *
 * To select a day:
 *
 * ```jsx
 * function App() {
 * return (
 *  <DayPicker
 *    initialMonth={new Date(2020, 8)}
 *    selected={[
 *      new Date(2020, 8, 1),
 *      new Date(2020, 8, 19),
 *      new Date(2020, 8, 21),
 *      { after: new Date(2020, 8, 30), before: new Date(2020, 10, 1) }
 *    ]}
 *  />
 * );
 * ```
 * @category Components
 */
function DayPicker(props) {
    if (props === void 0) { props = defaultProps; }
    var isControlled = Boolean(props.month);
    var _a = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(props.initialMonth || new Date())), currentMonth = _a[0], setCurrentMonth = _a[1];
    function handleMonthChange(month, e) {
        var _a;
        setCurrentMonth(month);
        (_a = props.onMonthChange) === null || _a === void 0 ? void 0 : _a.call(props, month, e);
    }
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Months, DayPicker_assign({}, props, { onMonthChange: !isControlled ? handleMonthChange : props.onMonthChange, month: isControlled ? props.month : currentMonth })));
}

// CONCATENATED MODULE: ./src/components/DayPicker/types/Modifiers.ts
/**
 * List the names of the default modifiers.
 */
var DefaultModifiersNames;
(function (DefaultModifiersNames) {
    /**
     * The day is disabled.
     */
    DefaultModifiersNames["DISABLED"] = "disabled";
    /**
     * The day is hidden.
     */
    DefaultModifiersNames["HIDDEN"] = "hidden";
    /**
     * The day is interactive.
     */
    DefaultModifiersNames["INTERACTIVE"] = "interactive";
    /**
     * The day is outside.
     */
    DefaultModifiersNames["AFTER_MONTH"] = "aftermonth";
    /**
     * The day is outside.
     */
    DefaultModifiersNames["BEFORE_MONTH"] = "beforemonth";
    /**
     * The day is selected.
     */
    DefaultModifiersNames["SELECTED"] = "selected";
    /**
     * The day is today.
     */
    DefaultModifiersNames["TODAY"] = "today";
})(DefaultModifiersNames || (DefaultModifiersNames = {}));

// CONCATENATED MODULE: ./src/components/DayPicker/types/index.ts


// CONCATENATED MODULE: ./src/components/DayPicker/index.ts






// CONCATENATED MODULE: ./src/hooks/useInput.ts
var useInput_assign = (undefined && undefined.__assign) || function () {
    useInput_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return useInput_assign.apply(this, arguments);
};



/**
 * @private
 */
function isValidDate(day) {
    return !isNaN(day.getTime());
}
/**
 * Hook to bind a input with a calendar.
 *
 * ```jsx
 * const {
 *  month,
 *  selected,
 *  dayPickerProps,
 *  inputProps
 * } = useInput(new Date());
 *
 * <DayPicker {...dayPickerProps} />
 * <input {...inputProps} />
 * ```
 *
 * @category Hooks
 */
function useInput(initialSelectedDay, formatStr, options) {
    var opts = useInput_assign({ locale: defaultProps.locale, required: false }, options);
    var initialInputValue = initialSelectedDay
        ? external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format(initialSelectedDay, formatStr, opts)
        : '';
    var _a = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(initialSelectedDay), selectedDay = _a[0], setSelectedDay = _a[1];
    var _b = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(initialInputValue), inputValue = _b[0], setInputValue = _b[1];
    var _c = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(initialSelectedDay || new Date()), currentMonth = _c[0], setCurrentMonth = _c[1];
    function onChange(e) {
        var el = e.target;
        setInputValue(el.value);
        var day = external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.parse(el.value, formatStr, new Date(), opts);
        if (!isValidDate(day)) {
            setSelectedDay(undefined);
            return;
        }
        setSelectedDay(day);
        setCurrentMonth(day); // Update the month shown in the calendar.
    }
    function onBlur(e) {
        var el = e.target;
        var day = external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.parse(el.value, formatStr, new Date(), opts);
        if (isValidDate(day) || !opts.required) {
            if (onBlur)
                onBlur(e);
            return;
        }
        setSelectedDay(initialSelectedDay);
        setCurrentMonth(initialSelectedDay || new Date());
        setInputValue(initialInputValue || '');
    }
    function onFocus(e) {
        var el = e.target;
        if (el.value) {
            var day = external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.parse(el.value, formatStr, new Date(), opts);
            if (isValidDate(day)) {
                setCurrentMonth(day);
            }
            if (onFocus)
                onFocus(e);
            return;
        }
        setSelectedDay(initialSelectedDay);
        setCurrentMonth(initialSelectedDay || new Date());
        setInputValue(initialInputValue || '');
        if (onFocus)
            onFocus(e);
    }
    function onDayClick(day) {
        // if (day.modifiers.selected) {
        //   if (!opts.required) {
        //     setSelectedDay(undefined);
        //     setInputValue('');
        //   }
        //   return;
        // }
        setSelectedDay(day);
        var value = external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format(day, formatStr, opts);
        setInputValue(value);
    }
    function onMonthChange(month) {
        setCurrentMonth(month);
    }
    return {
        month: currentMonth,
        selected: selectedDay,
        dayPickerProps: { onDayClick: onDayClick, onMonthChange: onMonthChange },
        inputProps: {
            value: inputValue,
            onChange: onChange,
            onFocus: onFocus,
            onBlur: onBlur
        }
    };
}

// CONCATENATED MODULE: ./src/index.ts

// Defaults


// Customizable components








// Hooks




/***/ }),

/***/ 259:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__259__;

/***/ }),

/***/ 698:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__698__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(334);
/******/ })()
;
});
//# sourceMappingURL=index.js.map