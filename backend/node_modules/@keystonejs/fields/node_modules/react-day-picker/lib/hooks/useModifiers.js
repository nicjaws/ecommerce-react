var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { isToday } from 'date-fns';
import { defaultModifiers } from '../components/DayPicker/defaults/defaultModifiers';
import { getMatchingModifiers } from './modifiers-utils/getMatchingModifiers';
import { getModifiersFromProps } from './modifiers-utils/getModifiersFromProps';
import { getOutsideModifier } from './modifiers-utils/getOutsideModifier';
/**
 * Get the modifiers for the specified day.
 *
 * @category Hooks
 */
export function useModifiers(day, currentMonth, props) {
    var modifiers = __assign({}, defaultModifiers);
    modifiers.today = isToday(day);
    var outsideModifier = getOutsideModifier(day, currentMonth);
    if (outsideModifier) {
        modifiers[outsideModifier] = true;
    }
    var isOutside = modifiers.beforemonth || modifiers.aftermonth;
    modifiers.hidden = isOutside && !props.showOutsideDays;
    modifiers.disabled = isOutside && !props.enableOutsideDaysClick;
    var modifiersFromProps = getModifiersFromProps(props);
    var modifiersArray = getMatchingModifiers(day, modifiersFromProps);
    modifiersArray.forEach(function (modifier) { return (modifiers[modifier] = true); });
    if (!props.onDayClick || modifiers.hidden || modifiers.disabled) {
        modifiers.interactive = false;
    }
    return modifiers;
}
//# sourceMappingURL=useModifiers.js.map