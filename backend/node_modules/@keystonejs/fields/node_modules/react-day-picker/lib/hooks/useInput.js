var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as DateFns from 'date-fns';
import { defaultProps } from '../components/DayPicker/defaults/defaultProps';
/**
 * @private
 */
function isValidDate(day) {
    return !isNaN(day.getTime());
}
/**
 * Hook to bind a input with a calendar.
 *
 * ```jsx
 * const {
 *  month,
 *  selected,
 *  dayPickerProps,
 *  inputProps
 * } = useInput(new Date());
 *
 * <DayPicker {...dayPickerProps} />
 * <input {...inputProps} />
 * ```
 *
 * @category Hooks
 */
export function useInput(initialSelectedDay, formatStr, options) {
    var opts = __assign({ locale: defaultProps.locale, required: false }, options);
    var initialInputValue = initialSelectedDay
        ? DateFns.format(initialSelectedDay, formatStr, opts)
        : '';
    var _a = React.useState(initialSelectedDay), selectedDay = _a[0], setSelectedDay = _a[1];
    var _b = React.useState(initialInputValue), inputValue = _b[0], setInputValue = _b[1];
    var _c = React.useState(initialSelectedDay || new Date()), currentMonth = _c[0], setCurrentMonth = _c[1];
    function onChange(e) {
        var el = e.target;
        setInputValue(el.value);
        var day = DateFns.parse(el.value, formatStr, new Date(), opts);
        if (!isValidDate(day)) {
            setSelectedDay(undefined);
            return;
        }
        setSelectedDay(day);
        setCurrentMonth(day); // Update the month shown in the calendar.
    }
    function onBlur(e) {
        var el = e.target;
        var day = DateFns.parse(el.value, formatStr, new Date(), opts);
        if (isValidDate(day) || !opts.required) {
            if (onBlur)
                onBlur(e);
            return;
        }
        setSelectedDay(initialSelectedDay);
        setCurrentMonth(initialSelectedDay || new Date());
        setInputValue(initialInputValue || '');
    }
    function onFocus(e) {
        var el = e.target;
        if (el.value) {
            var day = DateFns.parse(el.value, formatStr, new Date(), opts);
            if (isValidDate(day)) {
                setCurrentMonth(day);
            }
            if (onFocus)
                onFocus(e);
            return;
        }
        setSelectedDay(initialSelectedDay);
        setCurrentMonth(initialSelectedDay || new Date());
        setInputValue(initialInputValue || '');
        if (onFocus)
            onFocus(e);
    }
    function onDayClick(day) {
        // if (day.modifiers.selected) {
        //   if (!opts.required) {
        //     setSelectedDay(undefined);
        //     setInputValue('');
        //   }
        //   return;
        // }
        setSelectedDay(day);
        var value = DateFns.format(day, formatStr, opts);
        setInputValue(value);
    }
    function onMonthChange(month) {
        setCurrentMonth(month);
    }
    return {
        month: currentMonth,
        selected: selectedDay,
        dayPickerProps: { onDayClick: onDayClick, onMonthChange: onMonthChange },
        inputProps: {
            value: inputValue,
            onChange: onChange,
            onFocus: onFocus,
            onBlur: onBlur
        }
    };
}
//# sourceMappingURL=useInput.js.map