var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { getMonths } from './getMonths';
import { defaultProps } from '../DayPicker/defaults/defaultProps';
describe('getMonths', function () {
    it('returns one month with default props', function () {
        expect(getMonths(defaultProps).length).toBe(1);
    });
    it('uses today as default month', function () {
        var props = __assign(__assign({}, defaultProps), { month: undefined });
        expect(getMonths(props)[0].getMonth()).toBe(new Date().getMonth());
    });
    it('returns the number of months', function () {
        var props = __assign(__assign({}, defaultProps), { numberOfMonths: 2 });
        expect(getMonths(props).length).toBe(2);
    });
    it('respects the toMonth prop', function () {
        var result = getMonths(__assign(__assign({}, defaultProps), { numberOfMonths: 12, month: new Date(2019, 0), toMonth: new Date(2019, 4) }));
        expect(result.length).toBe(5);
    });
    it('respects the fromMonth prop', function () {
        var result = getMonths(__assign(__assign({}, defaultProps), { numberOfMonths: 12, month: new Date(2019, 0), fromMonth: new Date(2019, 5) }));
        expect(result.length).toBe(7);
        expect(result[0].getMonth()).toBe(5);
    });
    it('reverses the months', function () {
        var result = getMonths(__assign(__assign({}, defaultProps), { numberOfMonths: 12, reverseMonths: true, month: new Date(2019, 0) }));
        // first month is january, reversed is december
        expect(result[0].getMonth()).toBe(11);
    });
});
//# sourceMappingURL=getMonths.test.js.map