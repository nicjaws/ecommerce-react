var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { startOfMonth } from 'date-fns';
import { Months } from '../Months';
import { defaultProps } from './defaults/defaultProps';
/**
 * Render a date picker component.
 *
 * To select a day:
 *
 * ```jsx
 * function App() {
 * return (
 *  <DayPicker
 *    initialMonth={new Date(2020, 8)}
 *    selected={[
 *      new Date(2020, 8, 1),
 *      new Date(2020, 8, 19),
 *      new Date(2020, 8, 21),
 *      { after: new Date(2020, 8, 30), before: new Date(2020, 10, 1) }
 *    ]}
 *  />
 * );
 * ```
 * @category Components
 */
export function DayPicker(props) {
    if (props === void 0) { props = defaultProps; }
    var isControlled = Boolean(props.month);
    var _a = React.useState(startOfMonth(props.initialMonth || new Date())), currentMonth = _a[0], setCurrentMonth = _a[1];
    function handleMonthChange(month, e) {
        var _a;
        setCurrentMonth(month);
        (_a = props.onMonthChange) === null || _a === void 0 ? void 0 : _a.call(props, month, e);
    }
    return (React.createElement(Months, __assign({}, props, { onMonthChange: !isControlled ? handleMonthChange : props.onMonthChange, month: isControlled ? props.month : currentMonth })));
}
//# sourceMappingURL=DayPicker.js.map