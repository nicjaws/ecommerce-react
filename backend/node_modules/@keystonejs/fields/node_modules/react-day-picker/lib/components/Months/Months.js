var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { MonthTable } from '../MonthTable';
import { getTime } from 'date-fns';
import { getMonths } from './getMonths';
import { filterUndefinedProps } from './filterUndefinedProps';
import { defaultProps } from '../DayPicker/defaults/defaultProps';
/**
 * Render the months and the navigation.
 * @category Components
 */
export function Months(initialProps) {
    if (initialProps === void 0) { initialProps = defaultProps; }
    var _a, _b, _c, _d;
    // Extend props with defaults
    var components = Object.assign({}, defaultProps.components, initialProps.components);
    var classNames = Object.assign({}, defaultProps.classNames, initialProps.classNames);
    var props = __assign(__assign(__assign({}, defaultProps), filterUndefinedProps(initialProps)), { components: components, classNames: classNames });
    // From `style` prop
    var style = __assign(__assign({}, (_a = props.styles) === null || _a === void 0 ? void 0 : _a.root), props.style);
    // From `className prop`
    var className = [((_b = props.classNames) === null || _b === void 0 ? void 0 : _b.root) || ''];
    if (props.className) {
        className.concat(props.className.split(' '));
    }
    var months = getMonths(props);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    var Navigation = (_c = props.components) === null || _c === void 0 ? void 0 : _c.Navigation;
    return (React.createElement("div", { className: className.join(' '), style: style, dir: props.dir },
        props.showNavigation && props.onMonthChange && (React.createElement(Navigation, { dayPickerProps: props })),
        React.createElement("div", { className: (_d = props.classNames) === null || _d === void 0 ? void 0 : _d.months, style: props.styles ? props.styles.month : undefined }, months.map(function (month) { return (React.createElement(MonthTable, { key: getTime(month), month: month, dayPickerProps: props })); }))));
}
//# sourceMappingURL=Months.js.map