'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var isEqual = require('lodash.isequal');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var _classCallCheck__default = /*#__PURE__*/_interopDefault(_classCallCheck);
var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);
var isEqual__default = /*#__PURE__*/_interopDefault(isEqual);

var FieldController = function FieldController(_ref, _ref2, views) {
  var _this = this;

  var readViews = _ref2.readViews,
      preloadViews = _ref2.preloadViews,
      getListByKey = _ref2.getListByKey;

  var label = _ref.label,
      path = _ref.path,
      type = _ref.type,
      access = _ref.access,
      isOrderable = _ref.isOrderable,
      isPrimaryKey = _ref.isPrimaryKey,
      isRequired = _ref.isRequired,
      isReadOnly = _ref.isReadOnly,
      adminDoc = _ref.adminDoc,
      defaultValue = _ref.defaultValue,
      config = _objectWithoutProperties__default['default'](_ref, ["label", "path", "type", "access", "isOrderable", "isPrimaryKey", "isRequired", "isReadOnly", "adminDoc", "defaultValue"]);

  _classCallCheck__default['default'](this, FieldController);

  _defineProperty__default['default'](this, "getQueryFragment", function () {
    return _this.path;
  });

  _defineProperty__default['default'](this, "serialize", function (data) {
    return data[_this.path] || null;
  });

  _defineProperty__default['default'](this, "validateInput", function () {});

  _defineProperty__default['default'](this, "deserialize", function (data) {
    return data[_this.path];
  });

  _defineProperty__default['default'](this, "hasChanged", function (initialData, currentData) {
    return !isEqual__default['default'](initialData[_this.path], currentData[_this.path]);
  });

  _defineProperty__default['default'](this, "getDefaultValue", function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$originalInput = _ref3.originalInput,
        originalInput = _ref3$originalInput === void 0 ? {} : _ref3$originalInput,
        _ref3$prefill = _ref3.prefill,
        prefill = _ref3$prefill === void 0 ? {} : _ref3$prefill;

    return _this._getDefaultValue({
      originalInput: originalInput,
      prefill: prefill
    });
  });

  _defineProperty__default['default'](this, "initCellView", function () {
    var Cell = _this.views.Cell;

    if (Cell) {
      _this.readViews([Cell]);
    }
  });

  _defineProperty__default['default'](this, "initFieldView", function () {
    var Field = _this.views.Field;

    if (Field) {
      _this.readViews([Field]);
    }
  });

  _defineProperty__default['default'](this, "initFilterView", function () {
    var Filter = _this.views.Filter;

    if (Filter) {
      _this.readViews([Filter]);
    }
  });

  _defineProperty__default['default'](this, "getFilterTypes", function () {
    return [];
  });

  _defineProperty__default['default'](this, "getFilterValue", function (value) {
    return value;
  });

  this.config = config;
  this.label = label;
  this.path = path;
  this.type = type;
  this.maybeAccess = access;
  this.isOrderable = isOrderable;
  this.isPrimaryKey = isPrimaryKey;
  this.isRequired = isRequired;
  this.isReadOnly = isReadOnly;
  this.adminDoc = adminDoc;
  this.readViews = readViews;
  this.preloadViews = preloadViews;
  this.getListByKey = getListByKey;
  this.views = views;

  if (typeof defaultValue !== 'function') {
    // By default, the default value is undefined
    this._getDefaultValue = function (_ref4) {
      var prefill = _ref4.prefill;
      return prefill[_this.path] || defaultValue;
    };
  } else {
    this._getDefaultValue = defaultValue;
  }
} // TODO: This is a bad default; we should (somehow?) inspect the fields provided
// by the implementations gqlOutputFields
;

exports.default = FieldController;
