import React, { forwardRef, memo, useEffect, Fragment } from 'react';
import { createPortal } from 'react-dom';
import ScrollLock from 'react-scrolllock';
import FocusTrap from 'focus-trap-react';
import { withTransitionState, generateUEID, Blanket, fade, slideUp } from '@arch-ui/modal-utils';
import { A11yText } from '@arch-ui/typography';
import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import styled from '@emotion/styled';
import { colors } from '@arch-ui/theme';
import { alpha } from '@arch-ui/color-utils';

const outerGutter = 40;
const innerGutter = 20;
const Positioner = styled.div(({
  width
}) => ({
  display: 'flex',
  flexDirection: 'column',
  left: 0,
  marginLeft: 'auto',
  marginRight: 'auto',
  maxHeight: `calc(100% - ${outerGutter * 2}px)`,
  maxWidth: width,
  position: 'fixed',
  right: 0,
  top: outerGutter,
  zIndex: 2
}));
const Dialog = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    component: Tag
  } = _ref,
      props = _objectWithoutProperties(_ref, ["component"]);

  return jsx(Tag, _extends({
    ref: ref,
    role: "dialog",
    css: {
      backgroundColor: 'white',
      borderRadius: 5,
      boxShadow: '0 2px 8px -1px rgba(0,0,0,0.3)',
      display: 'flex',
      flex: 1,
      flexDirection: 'column',
      maxHeight: '100%'
    }
  }, props));
});
const HeadFoot = styled.div({
  lineHeight: 1,
  margin: `0 ${innerGutter}px`,
  paddingBottom: innerGutter,
  paddingTop: innerGutter,
  // ensure that box-shadow covers body content
  position: 'relative',
  zIndex: 1
});
const Header = styled(HeadFoot)({
  boxShadow: `0 2px 0 ${alpha(colors.text, 0.12)}`
});
const Footer = styled(HeadFoot)({
  boxShadow: `0 -2px 0 ${alpha(colors.text, 0.12)}`
});
const Title = styled.h3({
  fontSize: 18,
  fontWeight: 500,
  margin: 0
});
const Body = styled.div({
  lineHeight: 1.4,
  overflowY: 'auto',
  padding: innerGutter
});

const ModalDialog = /*#__PURE__*/memo(({
  attachTo = typeof document !== 'undefined' ? document.body : null,
  children,
  closeOnBlanketClick = false,
  component = 'div',
  footer,
  heading,
  initialFocus,
  onClose,
  onKeyDown,
  transitionState,
  width = 640
}) => {
  useEffect(() => {
    const handleKeyDown = e => {
      if (onKeyDown) onKeyDown(e);
    };

    document.addEventListener('keydown', handleKeyDown, false);
    return () => {
      document.removeEventListener('keydown', handleKeyDown, false);
    };
  });
  const dialogTitleId = generateUEID();

  if (!attachTo) {
    return null;
  }

  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Blanket, {
    style: fade(transitionState),
    onClick: closeOnBlanketClick ? onClose : undefined,
    isTinted: true
  }), /*#__PURE__*/React.createElement(Positioner, {
    style: slideUp(transitionState),
    width: width
  }, /*#__PURE__*/React.createElement(FocusTrap, {
    focusTrapOptions: {
      initialFocus,
      clickOutsideDeactivates: closeOnBlanketClick
    }
  }, /*#__PURE__*/React.createElement(Dialog, {
    component: component,
    "aria-labelledby": dialogTitleId
  }, /*#__PURE__*/React.createElement(A11yText, {
    id: dialogTitleId
  }, heading, " Dialog"), heading ? /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Title, null, heading)) : null, /*#__PURE__*/React.createElement(ScrollLock, null, /*#__PURE__*/React.createElement(Body, null, children)), footer ? /*#__PURE__*/React.createElement(Footer, null, footer) : null)))), attachTo);
});
var Dialog$1 = withTransitionState(ModalDialog);

export default Dialog$1;
