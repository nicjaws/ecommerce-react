'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var React = require('react');
var styled = require('@emotion/styled');
var core = require('@emotion/core');
var theme = require('@arch-ui/theme');
var typography = require('@arch-ui/typography');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);
var React__default = /*#__PURE__*/_interopDefault(React);
var styled__default = /*#__PURE__*/_interopDefault(styled);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// Dots
// ==============================

const fadeAnim = core.keyframes`0%, 80%, 100% { opacity: 0; } 40% { opacity: 1; }`;
const appearanceColor = {
  default: theme.colors.N20,
  dark: theme.colors.text,
  primary: theme.colors.primary,
  inverted: 'white'
};
const DotsContainer = styled__default['default'].div(({
  size
}) => ({
  alignSelf: 'center',
  fontSize: size,
  lineHeight: 1,
  textAlign: 'center',
  verticalAlign: 'middle',
  display: 'inline-flex'
}));
const Dot = styled__default['default'].span(({
  appearance,
  delay = 0,
  isOffset
}) => ({
  animation: `${fadeAnim} 1s infinite ${delay}ms`,
  animationTimingFunction: 'ease-in-out',
  backgroundColor: appearanceColor[appearance],
  borderRadius: '1em',
  display: 'inline-block',
  height: '1em',
  marginLeft: isOffset ? '1em' : null,
  verticalAlign: 'top',
  width: '1em'
}));
const LoadingIndicator = ({
  appearance = 'default',
  size = 4
}) => /*#__PURE__*/React__default['default'].createElement(DotsContainer, {
  size: size
}, /*#__PURE__*/React__default['default'].createElement(Dot, {
  appearance: appearance
}), /*#__PURE__*/React__default['default'].createElement(Dot, {
  appearance: appearance,
  delay: 160,
  isOffset: true
}), /*#__PURE__*/React__default['default'].createElement(Dot, {
  appearance: appearance,
  delay: 320,
  isOffset: true
}), /*#__PURE__*/React__default['default'].createElement(typography.A11yText, null, "Loading")); // ==============================
// Spinner
// ==============================

const spinAnim = core.keyframes`to { transform: rotate(1turn); }`;

const spinnerCommon = ({
  size
}) => ({
  borderRadius: '50%',
  borderStyle: 'solid',
  borderWidth: size / 8,
  boxSizing: 'border-box',
  height: size,
  width: size
});

const SpinnerWrapper = styled__default['default'].div(({
  size
}) => ({
  height: size,
  width: size,
  position: 'relative'
}));
const SpinnerOrbit = styled__default['default'].div(({
  color,
  size
}) => _objectSpread(_objectSpread({}, spinnerCommon({
  size
})), {}, {
  borderColor: color,
  opacity: 0.2,
  position: 'relative'
}));
const SpinnerSatellite = styled__default['default'].div(({
  color,
  size
}) => _objectSpread(_objectSpread({}, spinnerCommon({
  size
})), {}, {
  animation: `${spinAnim} 1s linear infinite`,
  borderColor: `${color} transparent transparent`,
  left: 0,
  position: 'absolute',
  top: 0
}));
const LoadingSpinner = ({
  appearance = 'default',
  size = 16
}) => {
  const color = appearanceColor[appearance];
  return /*#__PURE__*/React__default['default'].createElement(SpinnerWrapper, null, /*#__PURE__*/React__default['default'].createElement(SpinnerOrbit, {
    color: color,
    size: size
  }), /*#__PURE__*/React__default['default'].createElement(SpinnerSatellite, {
    color: color,
    size: size
  }), /*#__PURE__*/React__default['default'].createElement(typography.A11yText, null, "Loading"));
};

exports.LoadingIndicator = LoadingIndicator;
exports.LoadingSpinner = LoadingSpinner;
