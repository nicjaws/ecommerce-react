"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = require("@babel/runtime/helpers/defineProperty"), React = require("react"), styled = require("@emotion/styled"), core = require("@emotion/core"), theme = require("@arch-ui/theme"), typography = require("@arch-ui/typography");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _defineProperty__default = _interopDefault(_defineProperty), React__default = _interopDefault(React), styled__default = _interopDefault(styled);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty__default.default(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const fadeAnim = core.keyframes`0%, 80%, 100% { opacity: 0; } 40% { opacity: 1; }`, appearanceColor = {
  default: theme.colors.N20,
  dark: theme.colors.text,
  primary: theme.colors.primary,
  inverted: "white"
}, DotsContainer = styled__default.default.div(({size: size}) => ({
  alignSelf: "center",
  fontSize: size,
  lineHeight: 1,
  textAlign: "center",
  verticalAlign: "middle",
  display: "inline-flex"
})), Dot = styled__default.default.span(({appearance: appearance, delay: delay = 0, isOffset: isOffset}) => ({
  animation: `${fadeAnim} 1s infinite ${delay}ms`,
  animationTimingFunction: "ease-in-out",
  backgroundColor: appearanceColor[appearance],
  borderRadius: "1em",
  display: "inline-block",
  height: "1em",
  marginLeft: isOffset ? "1em" : null,
  verticalAlign: "top",
  width: "1em"
})), LoadingIndicator = ({appearance: appearance = "default", size: size = 4}) => React__default.default.createElement(DotsContainer, {
  size: size
}, React__default.default.createElement(Dot, {
  appearance: appearance
}), React__default.default.createElement(Dot, {
  appearance: appearance,
  delay: 160,
  isOffset: !0
}), React__default.default.createElement(Dot, {
  appearance: appearance,
  delay: 320,
  isOffset: !0
}), React__default.default.createElement(typography.A11yText, null, "Loading")), spinAnim = core.keyframes`to { transform: rotate(1turn); }`, spinnerCommon = ({size: size}) => ({
  borderRadius: "50%",
  borderStyle: "solid",
  borderWidth: size / 8,
  boxSizing: "border-box",
  height: size,
  width: size
}), SpinnerWrapper = styled__default.default.div(({size: size}) => ({
  height: size,
  width: size,
  position: "relative"
})), SpinnerOrbit = styled__default.default.div(({color: color, size: size}) => _objectSpread(_objectSpread({}, spinnerCommon({
  size: size
})), {}, {
  borderColor: color,
  opacity: .2,
  position: "relative"
})), SpinnerSatellite = styled__default.default.div(({color: color, size: size}) => _objectSpread(_objectSpread({}, spinnerCommon({
  size: size
})), {}, {
  animation: spinAnim + " 1s linear infinite",
  borderColor: color + " transparent transparent",
  left: 0,
  position: "absolute",
  top: 0
})), LoadingSpinner = ({appearance: appearance = "default", size: size = 16}) => {
  const color = appearanceColor[appearance];
  return React__default.default.createElement(SpinnerWrapper, null, React__default.default.createElement(SpinnerOrbit, {
    color: color,
    size: size
  }), React__default.default.createElement(SpinnerSatellite, {
    color: color,
    size: size
  }), React__default.default.createElement(typography.A11yText, null, "Loading"));
};

exports.LoadingIndicator = LoadingIndicator, exports.LoadingSpinner = LoadingSpinner;
