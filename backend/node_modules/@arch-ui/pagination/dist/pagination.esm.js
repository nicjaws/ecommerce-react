import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import { useState, useEffect } from 'react';
import { KebabHorizontalIcon, ChevronLeftIcon, ChevronRightIcon } from '@primer/octicons-react';
import { FlexGroup } from '@arch-ui/layout';
import { LoadingSpinner } from '@arch-ui/loading';
import { Button } from '@arch-ui/button';
import { colors } from '@arch-ui/theme';

const Page = props => {
  const {
    onClick,
    value,
    isSelected
  } = props;

  const handleClick = () => {
    if (onClick) {
      onClick(value);
    }
  };

  return jsx(Button, _extends({}, props, {
    variant: "nuance",
    onClick: handleClick,
    css: isSelected ? {
      backgroundColor: colors.primary,
      color: 'white'
    } : {}
  }));
};

function ariaPageLabelFn(page) {
  return `Go to page ${page}`;
}

const PageChildren = ({
  page,
  isLoading,
  isSelected
}) => {
  const [shouldShowLoading, setShouldShowLoading] = useState(false);
  useEffect(() => {
    if (isLoading && isSelected) {
      const id = setTimeout(() => {
        setShouldShowLoading(true);
      }, 200);
      return () => {
        clearTimeout(id);
        setShouldShowLoading(false);
      };
    }
  }, [page, isLoading, isSelected]);
  return shouldShowLoading ? jsx("div", {
    css: {
      height: 19
    }
  }, jsx(LoadingSpinner, null)) : jsx("span", null, page);
};

const Pagination = (_ref) => {
  let {
    ariaPageLabel = ariaPageLabelFn,
    currentPage = 1,
    limit = 5,
    pageSize,
    total,
    isLoading,
    onChange
  } = _ref,
      props = _objectWithoutProperties(_ref, ["ariaPageLabel", "currentPage", "limit", "pageSize", "total", "isLoading", "onChange"]);

  if (total <= pageSize) return null;
  const pages = [];
  const totalPages = Math.ceil(total / pageSize);
  let minPage = 1;
  let maxPage = totalPages;

  if (limit && limit < totalPages) {
    const rightLimit = Math.floor(limit / 2);
    const leftLimit = rightLimit + limit % 2 - 1;
    minPage = currentPage - leftLimit;
    maxPage = currentPage + rightLimit;

    if (minPage < 1) {
      maxPage = limit;
      minPage = 1;
    }

    if (maxPage > totalPages) {
      minPage = totalPages - limit + 1;
      maxPage = totalPages;
    }
  }

  const handleChange = page => {
    if (onChange) {
      onChange(page, {
        pageSize,
        total,
        minPage,
        maxPage
      });
    }
  }; // go to first


  if (minPage > 1) {
    pages.push(jsx(Page, {
      "aria-label": ariaPageLabel(1),
      key: "page_start",
      onClick: handleChange,
      value: 1
    }, jsx(KebabHorizontalIcon, null)));
  } // loop over range


  for (let page = minPage; page <= maxPage; page++) {
    const isSelected = page === currentPage;
    pages.push(jsx(Page, {
      "aria-label": ariaPageLabel(page),
      "aria-current": isSelected ? 'page' : null,
      key: `page_${page}`,
      isSelected: isSelected,
      onClick: handleChange,
      value: page
    }, jsx(PageChildren, {
      isLoading: isLoading,
      page: page,
      isSelected: isSelected
    })));
  } // go to last


  if (maxPage < totalPages) {
    pages.push(jsx(Page, {
      "aria-label": ariaPageLabel(totalPages),
      key: "page_end",
      onClick: handleChange,
      value: totalPages
    }, jsx(KebabHorizontalIcon, null)));
  }

  return jsx(FlexGroup, _extends({
    as: "nav",
    align: "center",
    "aria-label": "Pagination",
    isInline: true
  }, props), jsx(Page, {
    "aria-label": "Go to previous page",
    key: "page_prev",
    onClick: handleChange,
    value: currentPage - 1,
    isDisabled: currentPage === 1
  }, jsx(ChevronLeftIcon, null)), pages, jsx(Page, {
    "aria-label": "Go to next page",
    key: "page_next",
    onClick: handleChange,
    value: currentPage + 1,
    isDisabled: currentPage === totalPages
  }, jsx(ChevronRightIcon, null)));
};

export { Pagination };
