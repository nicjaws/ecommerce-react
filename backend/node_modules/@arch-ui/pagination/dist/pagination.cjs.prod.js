"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = require("@babel/runtime/helpers/extends"), _objectWithoutProperties = require("@babel/runtime/helpers/objectWithoutProperties"), core = require("@emotion/core"), react = require("react"), octiconsReact = require("@primer/octicons-react"), layout = require("@arch-ui/layout"), loading = require("@arch-ui/loading"), button = require("@arch-ui/button"), theme = require("@arch-ui/theme");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _extends__default = _interopDefault(_extends), _objectWithoutProperties__default = _interopDefault(_objectWithoutProperties);

const Page = props => {
  const {onClick: onClick, value: value, isSelected: isSelected} = props;
  return core.jsx(button.Button, _extends__default.default({}, props, {
    variant: "nuance",
    onClick: () => {
      onClick && onClick(value);
    },
    css: isSelected ? {
      backgroundColor: theme.colors.primary,
      color: "white"
    } : {}
  }));
};

function ariaPageLabelFn(page) {
  return "Go to page " + page;
}

const PageChildren = ({page: page, isLoading: isLoading, isSelected: isSelected}) => {
  const [shouldShowLoading, setShouldShowLoading] = react.useState(!1);
  return react.useEffect(() => {
    if (isLoading && isSelected) {
      const id = setTimeout(() => {
        setShouldShowLoading(!0);
      }, 200);
      return () => {
        clearTimeout(id), setShouldShowLoading(!1);
      };
    }
  }, [ page, isLoading, isSelected ]), shouldShowLoading ? core.jsx("div", {
    css: {
      height: 19
    }
  }, core.jsx(loading.LoadingSpinner, null)) : core.jsx("span", null, page);
}, Pagination = _ref => {
  let {ariaPageLabel: ariaPageLabel = ariaPageLabelFn, currentPage: currentPage = 1, limit: limit = 5, pageSize: pageSize, total: total, isLoading: isLoading, onChange: onChange} = _ref, props = _objectWithoutProperties__default.default(_ref, [ "ariaPageLabel", "currentPage", "limit", "pageSize", "total", "isLoading", "onChange" ]);
  if (total <= pageSize) return null;
  const pages = [], totalPages = Math.ceil(total / pageSize);
  let minPage = 1, maxPage = totalPages;
  if (limit && limit < totalPages) {
    const rightLimit = Math.floor(limit / 2);
    minPage = currentPage - (rightLimit + limit % 2 - 1), maxPage = currentPage + rightLimit, 
    minPage < 1 && (maxPage = limit, minPage = 1), maxPage > totalPages && (minPage = totalPages - limit + 1, 
    maxPage = totalPages);
  }
  const handleChange = page => {
    onChange && onChange(page, {
      pageSize: pageSize,
      total: total,
      minPage: minPage,
      maxPage: maxPage
    });
  };
  minPage > 1 && pages.push(core.jsx(Page, {
    "aria-label": ariaPageLabel(1),
    key: "page_start",
    onClick: handleChange,
    value: 1
  }, core.jsx(octiconsReact.KebabHorizontalIcon, null)));
  for (let page = minPage; page <= maxPage; page++) {
    const isSelected = page === currentPage;
    pages.push(core.jsx(Page, {
      "aria-label": ariaPageLabel(page),
      "aria-current": isSelected ? "page" : null,
      key: "page_" + page,
      isSelected: isSelected,
      onClick: handleChange,
      value: page
    }, core.jsx(PageChildren, {
      isLoading: isLoading,
      page: page,
      isSelected: isSelected
    })));
  }
  return maxPage < totalPages && pages.push(core.jsx(Page, {
    "aria-label": ariaPageLabel(totalPages),
    key: "page_end",
    onClick: handleChange,
    value: totalPages
  }, core.jsx(octiconsReact.KebabHorizontalIcon, null))), core.jsx(layout.FlexGroup, _extends__default.default({
    as: "nav",
    align: "center",
    "aria-label": "Pagination",
    isInline: !0
  }, props), core.jsx(Page, {
    "aria-label": "Go to previous page",
    key: "page_prev",
    onClick: handleChange,
    value: currentPage - 1,
    isDisabled: 1 === currentPage
  }, core.jsx(octiconsReact.ChevronLeftIcon, null)), pages, core.jsx(Page, {
    "aria-label": "Go to next page",
    key: "page_next",
    onClick: handleChange,
    value: currentPage + 1,
    isDisabled: currentPage === totalPages
  }, core.jsx(octiconsReact.ChevronRightIcon, null)));
};

exports.Pagination = Pagination;
