"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = require("@babel/runtime/helpers/defineProperty"), _extends = require("@babel/runtime/helpers/extends"), _objectWithoutProperties = require("@babel/runtime/helpers/objectWithoutProperties"), React = require("react"), reactTransitionGroup = require("react-transition-group"), core = require("@emotion/core"), theme = require("@arch-ui/theme"), colorUtils = require("@arch-ui/color-utils"), ScrollLock = require("react-scrolllock");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _defineProperty__default = _interopDefault(_defineProperty), _extends__default = _interopDefault(_extends), _objectWithoutProperties__default = _interopDefault(_objectWithoutProperties), React__default = _interopDefault(React), ScrollLock__default = _interopDefault(ScrollLock);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty__default.default(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const transitionDurationMs = 220, transitionDuration = "220ms", transitionTimingFunction = "cubic-bezier(0.2, 0, 0, 1)", TransitionProvider = _ref => {
  let {children: children, isOpen: isOpen} = _ref, props = _objectWithoutProperties__default.default(_ref, [ "children", "isOpen" ]);
  return React__default.default.createElement(reactTransitionGroup.TransitionGroup, {
    component: null
  }, isOpen ? React__default.default.createElement(reactTransitionGroup.Transition, _extends__default.default({
    appear: !0,
    mountOnEnter: !0,
    unmountOnExit: !0,
    timeout: 220
  }, props), state => children(state)) : null);
}, withTransitionState = Comp => _ref2 => {
  let {isOpen: isOpen} = _ref2, props = _objectWithoutProperties__default.default(_ref2, [ "isOpen" ]);
  return React__default.default.createElement(TransitionProvider, {
    isOpen: Boolean(isOpen)
  }, state => React__default.default.createElement(Comp, _extends__default.default({
    transitionState: state
  }, props)));
};

function makeTransitionBase(transitionProperty) {
  return {
    transitionProperty: transitionProperty,
    transitionDuration: "220ms",
    transitionTimingFunction: transitionTimingFunction
  };
}

const fade = transitionState => _objectSpread(_objectSpread({}, makeTransitionBase("opacity")), {}, {
  opacity: {
    entering: 1,
    entered: 1,
    exiting: 0,
    exited: 0
  }[transitionState]
}), slideUp = transitionState => {
  const out = {
    opacity: 0,
    transform: "scale(0.95) translate3d(0,20px,0)"
  };
  return _objectSpread(_objectSpread({}, makeTransitionBase("opacity, transform")), {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    },
    exiting: out,
    exited: out
  }[transitionState]);
}, slideDown = (transitionState, {from: from = "-8px"} = {}) => {
  const out = {
    opacity: 0,
    transform: `translate3d(0,${from},0)`
  };
  return _objectSpread(_objectSpread({}, makeTransitionBase("opacity, transform")), {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    },
    exiting: out,
    exited: out
  }[transitionState]);
}, fromMap = {
  left: "-100%",
  right: "100%"
}, slideInHorizontal = (transitionState, {slideInFrom: slideInFrom}) => {
  const initial = fromMap[slideInFrom];
  return _objectSpread(_objectSpread({}, makeTransitionBase("transform")), {
    entering: {
      transform: "translate3d(0,0,0)"
    },
    entered: {
      transform: "translate3d(0,0,0)"
    },
    exiting: {
      transform: `translate3d(${initial}, 0, 0)`
    },
    exited: {
      transform: `translate3d(${initial}, 0, 0)`
    }
  }[transitionState]);
}, zoomInDown = transitionState => _objectSpread({
  transformOrigin: "top",
  transitionProperty: "opacity, transform",
  transitionDuration: "220ms",
  transitionTimingFunction: transitionTimingFunction
}, {
  entering: {
    opacity: 1,
    transform: "translate3d(0, 0, 0)"
  },
  entered: {
    opacity: 1,
    transform: "translate3d(0, 0, 0)"
  },
  exiting: {
    opacity: 0,
    transform: "scale3d(0.33, 0.33, 0.33) translate3d(0, -100%, 0)"
  },
  exited: {
    opacity: 0,
    transform: "scale3d(0.33, 0.33, 0.33) translate3d(0, -100%, 0)"
  }
}[transitionState]), springDown = transitionState => _objectSpread({
  transformOrigin: "top",
  transitionProperty: "opacity, transform",
  transitionDuration: "220ms",
  transitionTimingFunction: "cubic-bezier(0.2, 0, 0.16, 1.6)"
}, {
  entering: {
    opacity: 1,
    transform: "translate3d(0, 0, 0)"
  },
  entered: {
    opacity: 1,
    transform: "translate3d(0, 0, 0)"
  },
  exiting: {
    opacity: 0,
    transform: "scale(0.93) translate3d(0, -12px, 0)"
  },
  exited: {
    opacity: 0,
    transform: "scale(0.93) translate3d(0, -12px, 0)"
  }
}[transitionState]), Blanket = _ref => {
  let {isTinted: isTinted, isLight: isLight} = _ref, props = _objectWithoutProperties__default.default(_ref, [ "isTinted", "isLight" ]), bg = "transparent";
  return isTinted && (bg = isLight ? "rgba(255, 255, 255, 0.5)" : colorUtils.alpha(theme.colors.N100, .2)), 
  core.jsx("div", _extends__default.default({
    css: {
      backgroundColor: bg,
      bottom: 0,
      left: 0,
      position: "fixed",
      right: 0,
      top: 0,
      zIndex: 2
    }
  }, props));
}, getDisplayName = C => `withModalHandlers(${C.displayName || C.name || "Component"})`, Target = React.memo(({isOpen: isOpen, mode: mode, target: target, targetRef: targetRef, open: open, toggle: toggle}) => {
  const cloneProps = {
    isActive: isOpen,
    ref: targetRef
  };
  return "click" === mode && (cloneProps.onClick = toggle), "contextmenu" === mode && (cloneProps.onContextMenu = open), 
  target(cloneProps);
}), withModalHandlers = (WrappedComponent, {transition: transition}) => React.forwardRef((_ref, ref) => {
  let {defaultIsOpen: defaultIsOpen = !1, mode: mode = "click", onClose: onClose = (() => {}), onOpen: onOpen = (() => {}), target: target} = _ref, props = _objectWithoutProperties__default.default(_ref, [ "defaultIsOpen", "mode", "onClose", "onOpen", "target" ]);
  const [isOpen, setIsOpen] = React.useState(defaultIsOpen), [clientX, setClientX] = React.useState(0), [clientY, setClientY] = React.useState(0), contentNode = React.useRef(), targetNode = React.useRef();
  var C;
  React.useImperativeHandle(ref, () => ({
    open: open,
    close: close
  })), React.useEffect(() => {
    if (!isOpen) return;
    const handleMouseDown = event => {
      const {target: target} = event;
      if (!(target instanceof HTMLElement || target instanceof SVGElement)) return;
      const clickNotIn = node => !node.current.contains(target);
      isOpen && clickNotIn(contentNode) && clickNotIn(targetNode) && close(event);
    }, handleKeyDown = event => {
      const {key: key} = event;
      "Escape" === key && close(event);
    };
    return document.addEventListener("mousedown", handleMouseDown), document.addEventListener("keydown", handleKeyDown, !1), 
    () => {
      document.removeEventListener("mousedown", handleMouseDown), document.removeEventListener("keydown", handleKeyDown, !1);
    };
  }, [ isOpen ]), React.useDebugValue(`withModalHandlers(${(C = WrappedComponent).displayName || C.name || "Component"})`);
  const open = event => {
    if (event.defaultPrevented) return;
    "contextmenu" === mode && event.preventDefault();
    const {clientX: clientX, clientY: clientY} = event;
    setIsOpen(!0), setClientX(clientX), setClientY(clientY);
  }, close = event => {
    event && event.defaultPrevented || (setIsOpen(!1), setClientX(0), setClientY(0));
  }, getContent = ref => {
    contentNode.current = ref;
  };
  return React__default.default.createElement(React.Fragment, null, React__default.default.createElement(Target, {
    targetRef: ref => {
      targetNode.current = ref;
    },
    target: target,
    mode: mode,
    isOpen: isOpen,
    toggle: event => {
      isOpen ? close(event) : open(event);
    },
    open: open
  }), isOpen && React__default.default.createElement(ScrollLock__default.default, null), React__default.default.createElement(TransitionProvider, {
    isOpen: isOpen,
    onEntered: onOpen,
    onExited: onClose
  }, transitionState => React__default.default.createElement(WrappedComponent, _extends__default.default({
    close: close,
    open: open,
    getModalRef: getContent,
    targetNode: targetNode.current,
    contentNode: contentNode.current,
    isOpen: isOpen,
    mouseCoords: {
      clientX: clientX,
      clientY: clientY
    },
    style: transition(transitionState)
  }, props))));
});

function generateUEID() {
  let first = 46656 * Math.random() | 0, second = 46656 * Math.random() | 0;
  return first = ("000" + first.toString(36)).slice(-3), second = ("000" + second.toString(36)).slice(-3), 
  first + second;
}

exports.Blanket = Blanket, exports.TransitionProvider = TransitionProvider, exports.fade = fade, 
exports.generateUEID = generateUEID, exports.slideDown = slideDown, exports.slideInHorizontal = slideInHorizontal, 
exports.slideUp = slideUp, exports.springDown = springDown, exports.withModalHandlers = withModalHandlers, 
exports.withTransitionState = withTransitionState, exports.zoomInDown = zoomInDown;
