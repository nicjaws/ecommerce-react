"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = require("@babel/runtime/helpers/extends"), _objectWithoutProperties = require("@babel/runtime/helpers/objectWithoutProperties"), _defineProperty = require("@babel/runtime/helpers/defineProperty"), React = require("react"), BaseSelect = require("react-select"), AsyncCreatableSelect = require("react-select/async-creatable"), AsyncSelect = require("react-select/async"), CreatableSelect = require("react-select/creatable"), theme = require("@arch-ui/theme");

function _interopDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}

var _extends__default = _interopDefault(_extends), _objectWithoutProperties__default = _interopDefault(_objectWithoutProperties), _defineProperty__default = _interopDefault(_defineProperty), BaseSelect__default = _interopDefault(BaseSelect), AsyncCreatableSelect__default = _interopDefault(AsyncCreatableSelect), AsyncSelect__default = _interopDefault(AsyncSelect), CreatableSelect__default = _interopDefault(CreatableSelect);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty__default.default(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const indicatorStyles = (provided, {isDisabled: isDisabled, isFocused: isFocused}) => {
  let styles = {
    color: theme.colors.N20,
    ":hover": isDisabled || isFocused ? null : {
      color: theme.colors.N40
    }
  };
  return isDisabled && (styles = {
    color: theme.colors.N10
  }), isFocused && (styles = {
    color: theme.colors.N60,
    ":hover": {
      color: theme.colors.N80
    }
  }), _objectSpread(_objectSpread({}, provided), styles);
}, selectStyles = {
  control: (provided, {isFocused: isFocused}) => {
    const focusStyles = isFocused ? {
      borderColor: theme.colors.primary,
      boxShadow: "inset 0 1px 1px rgba(0, 0, 0, 0.075),\n      0 0 0 3px " + theme.colors.B.A20,
      outline: 0
    } : null;
    return _objectSpread(_objectSpread({}, provided), {}, {
      backgroundColor: "white",
      borderColor: theme.colors.N20,
      fontSize: "1rem",
      minHeight: 35,
      minWidth: "200px",
      ":hover": {
        borderColor: theme.colors.N30
      }
    }, focusStyles);
  },
  clearIndicator: indicatorStyles,
  dropdownIndicator: indicatorStyles,
  menu: provided => _objectSpread(_objectSpread({}, provided), {}, {
    fontSize: "0.9em",
    zIndex: 10
  }),
  option: (provided, {isDisabled: isDisabled, isFocused: isFocused, isSelected: isSelected}) => {
    let bg = "inherit";
    isFocused && (bg = theme.colors.B.L90), isSelected && (bg = theme.colors.primary);
    let txt = "inherit";
    isFocused && (txt = theme.colors.primary), isSelected && (txt = "white"), isDisabled && (txt = theme.colors.N40);
    const cssPseudoActive = isSelected || isDisabled ? {} : {
      backgroundColor: theme.colors.B.L80,
      color: theme.colors.B.D20
    };
    return _objectSpread(_objectSpread({}, provided), {}, {
      fontSize: "1rem",
      backgroundColor: bg,
      color: txt,
      ":active": cssPseudoActive
    });
  },
  menuPortal: provided => _objectSpread(_objectSpread({}, provided), {}, {
    zIndex: 3
  })
}, getSelectVariant = ({isAsync: isAsync, isCreatable: isCreatable}) => isAsync && isCreatable ? AsyncCreatableSelect__default.default : isAsync ? AsyncSelect__default.default : isCreatable ? CreatableSelect__default.default : BaseSelect__default.default, Select = _ref => {
  let {isAsync: isAsync, isCreatable: isCreatable, innerRef: innerRef, styles: styles} = _ref, props = _objectWithoutProperties__default.default(_ref, [ "isAsync", "isCreatable", "innerRef", "styles" ]);
  const ReactSelect = getSelectVariant({
    isAsync: isAsync,
    isCreatable: isCreatable
  });
  return React.createElement(ReactSelect, _extends__default.default({
    ref: innerRef,
    styles: React.useMemo(() => _objectSpread(_objectSpread({}, selectStyles), styles), [ styles ])
  }, props));
};

exports.default = Select;
