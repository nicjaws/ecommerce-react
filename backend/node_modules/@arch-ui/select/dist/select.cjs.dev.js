'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var React = require('react');
var BaseSelect = require('react-select');
var AsyncCreatableSelect = require('react-select/async-creatable');
var AsyncSelect = require('react-select/async');
var CreatableSelect = require('react-select/creatable');
var theme = require('@arch-ui/theme');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);
var BaseSelect__default = /*#__PURE__*/_interopDefault(BaseSelect);
var AsyncCreatableSelect__default = /*#__PURE__*/_interopDefault(AsyncCreatableSelect);
var AsyncSelect__default = /*#__PURE__*/_interopDefault(AsyncSelect);
var CreatableSelect__default = /*#__PURE__*/_interopDefault(CreatableSelect);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// Styled Select
// ==============================

const indicatorStyles = (provided, {
  isDisabled,
  isFocused
}) => {
  let styles = {
    color: theme.colors.N20,
    ':hover': !isDisabled && !isFocused ? {
      color: theme.colors.N40
    } : null
  };
  if (isDisabled) styles = {
    color: theme.colors.N10
  };

  if (isFocused) {
    styles = {
      color: theme.colors.N60,
      ':hover': {
        color: theme.colors.N80
      }
    };
  }

  return _objectSpread(_objectSpread({}, provided), styles);
};

const selectStyles = {
  control: (provided, {
    isFocused
  }) => {
    const focusStyles = isFocused ? {
      borderColor: theme.colors.primary,
      boxShadow: `inset 0 1px 1px rgba(0, 0, 0, 0.075),
      0 0 0 3px ${theme.colors.B.A20}`,
      outline: 0
    } : null;
    return _objectSpread(_objectSpread({}, provided), {}, {
      backgroundColor: 'white',
      borderColor: theme.colors.N20,
      fontSize: '1rem',
      minHeight: 35,
      minWidth: '200px',
      ':hover': {
        borderColor: theme.colors.N30
      }
    }, focusStyles);
  },
  clearIndicator: indicatorStyles,
  dropdownIndicator: indicatorStyles,
  menu: provided => _objectSpread(_objectSpread({}, provided), {}, {
    fontSize: '0.9em',
    zIndex: 10
  }),
  option: (provided, {
    isDisabled,
    isFocused,
    isSelected
  }) => {
    let bg = 'inherit';
    if (isFocused) bg = theme.colors.B.L90;
    if (isSelected) bg = theme.colors.primary;
    let txt = 'inherit';
    if (isFocused) txt = theme.colors.primary;
    if (isSelected) txt = 'white';
    if (isDisabled) txt = theme.colors.N40;
    const cssPseudoActive = !isSelected && !isDisabled ? {
      backgroundColor: theme.colors.B.L80,
      color: theme.colors.B.D20
    } : {};
    return _objectSpread(_objectSpread({}, provided), {}, {
      fontSize: '1rem',
      backgroundColor: bg,
      color: txt,
      ':active': cssPseudoActive
    });
  },
  menuPortal: provided => _objectSpread(_objectSpread({}, provided), {}, {
    zIndex: 3
  })
};

const getSelectVariant = ({
  isAsync,
  isCreatable
}) => {
  if (isAsync && isCreatable) {
    return AsyncCreatableSelect__default['default'];
  }

  if (isAsync) {
    return AsyncSelect__default['default'];
  }

  if (isCreatable) {
    return CreatableSelect__default['default'];
  }

  return BaseSelect__default['default'];
};

const Select = (_ref) => {
  let {
    isAsync,
    isCreatable,
    innerRef,
    styles
  } = _ref,
      props = _objectWithoutProperties__default['default'](_ref, ["isAsync", "isCreatable", "innerRef", "styles"]);

  const ReactSelect = getSelectVariant({
    isAsync,
    isCreatable
  });
  return /*#__PURE__*/React.createElement(ReactSelect, _extends__default['default']({
    ref: innerRef,
    styles: React.useMemo(() => _objectSpread(_objectSpread({}, selectStyles), styles), [styles])
  }, props));
};

exports.default = Select;
