'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var styled = require('@emotion/styled');
var theme = require('@arch-ui/theme');
var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var React = require('react');
var reactRouterDom = require('react-router-dom');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);
var styled__default = /*#__PURE__*/_interopDefault(styled);
var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var React__default = /*#__PURE__*/_interopDefault(React);

const ItemElement = (_ref) => {
  let {
    as: Tag,
    isSelected,
    mouseIsOverNav
  } = _ref,
      props = _objectWithoutProperties__default['default'](_ref, ["as", "isSelected", "mouseIsOverNav"]);

  if (Tag) return /*#__PURE__*/React.createElement(Tag, props);
  if (props.to) return /*#__PURE__*/React.createElement(reactRouterDom.Link, props);
  if (props.href) return /*#__PURE__*/React.createElement("a", props);
  return /*#__PURE__*/React.createElement("button", _extends__default['default']({
    type: "button"
  }, props));
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const PRIMARY_NAV_GUTTER = theme.gridSize * 2;
const NavGroupIcons = styled__default['default'].div({
  alignItems: 'center',
  alignSelf: 'stretch',
  display: 'flex',
  justifyContent: 'space-between'
});
const PrimaryNav = styled__default['default'].nav({
  backgroundColor: theme.colors.page,
  boxSizing: 'border-box',
  display: 'flex',
  flexDirection: 'column',
  height: '100vh',
  position: 'fixed',
  zIndex: 2
});
const PrimaryNavScrollArea = styled__default['default'].div(({
  hasScroll,
  isBottom,
  isScrollable
}) => {
  const divider = {
    backgroundColor: 'rgba(9, 30, 66, 0.1)',
    content: '" "',
    height: 2,
    left: PRIMARY_NAV_GUTTER,
    right: PRIMARY_NAV_GUTTER,
    position: 'absolute'
  };
  const before = hasScroll ? _objectSpread(_objectSpread({}, divider), {}, {
    top: 0
  }) : null;
  const after = isScrollable && !isBottom ? _objectSpread(_objectSpread({}, divider), {}, {
    bottom: 0
  }) : null;
  return {
    boxSizing: 'border-box',
    flex: 1,
    overflowY: 'auto',
    overflowX: 'hidden',
    minWidth: 140,
    paddingBottom: PRIMARY_NAV_GUTTER,
    width: '100%',
    ':before': before,
    ':after': after
  };
});
const BrandItem = styled__default['default'].h2({
  fontSize: 18,
  fontWeight: 500,
  margin: 0,
  paddingBottom: PRIMARY_NAV_GUTTER
});
const PrimaryNavItem = styled__default['default'](ItemElement)(({
  depth,
  isSelected,
  mouseIsOverNav
}) => {
  const selectedStyles = isSelected ? {
    '&, :hover, :active, :focus': {
      ':after': {
        backgroundColor: theme.colors.primary
      }
    }
  } : {};
  return _objectSpread({
    border: 0,
    borderRight: '1px solid transparent',
    color: isSelected ? theme.colors.N90 : mouseIsOverNav ? theme.colors.N70 : theme.colors.N40,
    display: 'block',
    marginBottom: 2,
    overflow: 'hidden',
    padding: `${theme.gridSize * 1.5}px`,
    paddingLeft: depth ? PRIMARY_NAV_GUTTER * depth : PRIMARY_NAV_GUTTER,
    position: 'relative',
    textDecoration: 'none',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    transition: 'color 110ms',
    fontWeight: isSelected ? 'bold' : 'normal',
    flexGrow: 1,
    flexBasis: '100%',
    ':hover, :focus': {
      backgroundColor: theme.colors.N10,
      textDecoration: 'none'
    },
    ':active': {
      backgroundColor: theme.colors.N10
    },
    ':after': {
      borderRadius: 2,
      bottom: 2,
      content: '" "',
      pointerEvents: 'none',
      position: 'absolute',
      right: 6,
      top: 2,
      transition: 'background-color 110ms',
      width: 4
    }
  }, selectedStyles);
});
const NavIcon = styled__default['default'](ItemElement)(({
  mouseIsOverNav
}) => {
  return {
    color: mouseIsOverNav ? theme.colors.N70 : theme.colors.N40,
    padding: PRIMARY_NAV_GUTTER,
    textDecoration: 'none',
    flexGrow: 1,
    flexBasis: '100%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    ':hover, :focus': {
      backgroundColor: theme.colors.N10,
      textDecoration: 'none'
    },
    ':active': {
      backgroundColor: theme.colors.N10
    }
  };
});
const PrimaryNavHeading = styled__default['default'].h3(({
  depth
}) => ({
  color: theme.colors.N40,
  fontSize: '0.85em',
  fontWeight: 'bold',
  marginTop: '2em',
  paddingLeft: depth ? PRIMARY_NAV_GUTTER * depth : PRIMARY_NAV_GUTTER,
  paddingRight: PRIMARY_NAV_GUTTER,
  textTransform: 'uppercase'
}));

const Wrapper = styled__default['default'].nav({
  borderBottom: `1px solid ${theme.colors.N10}`,
  color: theme.colors.text,
  fontSize: '0.85em'
});
const SecondaryNavItem = styled__default['default'](ItemElement)(({
  isSelected
}) => ({
  boxShadow: `inset 0 ${isSelected ? -2 : 0}px 0 currentColor`,
  color: isSelected ? theme.colors.text : theme.colors.N60,
  cursor: 'pointer',
  display: 'inline-block',
  marginRight: theme.gridSize,
  paddingBottom: theme.gridSize * 2,
  paddingTop: theme.gridSize * 2,
  transition: 'box-shadow 200ms',
  ':hover': {
    color: theme.colors.text,
    textDecoration: 'none'
  }
}));
const SecondaryNav = ({
  children
}) => /*#__PURE__*/React__default['default'].createElement(Wrapper, null, children);

exports.BrandItem = BrandItem;
exports.NavGroupIcons = NavGroupIcons;
exports.NavIcon = NavIcon;
exports.PRIMARY_NAV_GUTTER = PRIMARY_NAV_GUTTER;
exports.PrimaryNav = PrimaryNav;
exports.PrimaryNavHeading = PrimaryNavHeading;
exports.PrimaryNavItem = PrimaryNavItem;
exports.PrimaryNavScrollArea = PrimaryNavScrollArea;
exports.SecondaryNav = SecondaryNav;
exports.SecondaryNavItem = SecondaryNavItem;
