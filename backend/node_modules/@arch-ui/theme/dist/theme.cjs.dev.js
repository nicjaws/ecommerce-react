'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var colorUtils = require('@arch-ui/color-utils');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const intent = {
  create: '#34c240',
  danger: '#d64242',
  info: '#0090e0',
  primary: '#2684FF',
  warning: '#fa9f47'
}; // neutrals

const neutrals = {
  N05: '#F4F5F7',
  N10: '#EBECF0',
  N15: '#DFE1E5',
  N20: '#C1C7D0',
  N30: '#A5ADBA',
  N40: '#97A0AF',
  N50: '#7A869A',
  N60: '#6C798F',
  N70: '#42526E',
  N80: '#253858',
  N90: '#172B4D',
  N100: '#091E42'
};
const source = Array.from(new Array(19), (item, index) => (index + 1) * 5);
const darkenSource = source.slice(0, 16).reverse(); // darker than D80 is basically black...

function makeVariants(color) {
  const variants = {};
  source.forEach(n => variants[`L${n}`] = colorUtils.lighten(color, n));
  variants.base = color;
  darkenSource.forEach(n => variants[`D${n}`] = colorUtils.darken(color, n));
  source.forEach(n => variants[`A${n}`] = colorUtils.alpha(color, n / 100));
  return variants;
}

const blue = '#2684FF';
const green = '#34c240';
const red = '#d64242';
const yellow = '#fa9f47'; // const neutral = '#7A869A';

const blues = makeVariants(blue);
const greens = makeVariants(green);
const reds = makeVariants(red);
const yellows = makeVariants(yellow); // const neutrals = makeVariants(neutral);

var colors = _objectSpread(_objectSpread(_objectSpread({
  R: reds,
  G: greens,
  B: blues,
  Y: yellows
}, neutrals), {}, {
  // named
  page: '#FAFBFC',
  text: neutrals.N90
}, intent), {}, {
  green,
  red,
  blue,
  yellow
});

const shade = alpha => `rgba(9, 30, 66, ${alpha})`;

const shadows = [`0px 2px 5px 0px ${shade(0.12)}`, `0px 5px 10px 0px ${shade(0.12)}`, `0px 6px 12px -2px ${shade(0.12)}, 0 0 0 1px ${shade(0.08)}`, `0px 6px 12px -2px ${shade(0.24)}, 0 0 0 1px ${shade(0.08)}`];

const fontFamily = `
  -apple-system,
  BlinkMacSystemFont,
  "Segoe UI",
  Roboto,
  Helvetica,
  Arial,
  sans-serif,
  "Apple Color Emoji",
  "Segoe UI Emoji",
  "Segoe UI Symbol"
`; // BlinkMacSystemFont produces very strange characters when printing from Chrome on Mac.

const printFontFamily = fontFamily.replace('BlinkMacSystemFont,', '');
const borderRadius = 6;
const gridSize = 8;
const fontSize = 16;
const globalStyles = {
  body: {
    backgroundColor: colors.page,
    color: colors.text,
    fontFamily: fontFamily,
    fontSize,
    letterSpacing: '-0.005em',
    margin: 0,
    textDecorationSkip: 'ink',
    textRendering: 'optimizeLegibility',
    msOverflowStyle: '-ms-autohiding-scrollbar',
    MozFontFeatureSettings: "'liga' on",
    MozOsxFontSmoothing: 'grayscale',
    WebkitFontSmoothing: 'antialiased',
    '@media print': {
      backgroundColor: 'white',
      fontFamily: printFontFamily
    }
  },
  a: {
    color: colors.primary,
    textDecoration: 'none'
  },
  'a:hover': {
    textDecoration: 'underline'
  }
};

exports.borderRadius = borderRadius;
exports.colors = colors;
exports.fontFamily = fontFamily;
exports.fontSize = fontSize;
exports.globalStyles = globalStyles;
exports.gridSize = gridSize;
exports.shadows = shadows;
