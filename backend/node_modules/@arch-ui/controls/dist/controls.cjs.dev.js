'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var React = require('react');
var reactRadios = require('react-radios');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var reactPseudoState = require('react-pseudo-state');
var styled = require('@emotion/styled');
var theme = require('@arch-ui/theme');
var input = require('@arch-ui/input');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var _defineProperty__default = /*#__PURE__*/_interopDefault(_defineProperty);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var styled__default = /*#__PURE__*/_interopDefault(styled);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const Wrapper = styled__default['default'].div({
  display: 'flex',
  alignItems: 'center'
});
const Label = styled__default['default'].label({
  alignItems: 'center',
  display: 'flex',
  lineHeight: 1
});
const Text = 'span';
const Icon = styled__default['default'].div(({
  checked,
  isDisabled,
  isFocus,
  isActive,
  isHover
}) => {
  // background
  let bg = theme.colors.N10;

  if (isDisabled && checked) {
    bg = theme.colors.N30;
  } else if (isActive) {
    bg = checked ? theme.colors.B.D10 : theme.colors.N20;
  } else if ((isFocus || isHover) && !checked) {
    bg = theme.colors.N15;
  } else if (checked) {
    bg = theme.colors.B.base;
  } // fill


  let fill = 'white';

  if (isDisabled && checked) {
    fill = theme.colors.N70;
  } else if (!checked) {
    fill = 'transparent';
  } // stroke


  let innerStroke = isFocus ? theme.colors.B.L20 : bg;
  let innerStrokeWidth = 1;

  if (checked && !isDisabled) {
    innerStroke = isActive ? theme.colors.B.D20 : theme.colors.B.base;
  }

  let outerStroke = 'transparent';
  let outerStrokeWidth = 1;

  if (isFocus && !isActive) {
    outerStroke = theme.colors.B.A20;
    outerStrokeWidth = 5;
  }

  return {
    color: bg,
    fill,
    lineHeight: 0,
    cursor: isDisabled ? 'not-allowed' : null,
    // awkwardly apply the focus ring
    '& .outer-stroke': {
      transition: 'stroke 0.2s ease-in-out',
      stroke: outerStroke,
      strokeWidth: outerStrokeWidth
    },
    '& .inner-stroke': {
      stroke: innerStroke,
      strokeWidth: innerStrokeWidth
    }
  };
});
const defaultComponents = {
  Wrapper,
  Label,
  Text
};
const Control = (_ref) => {
  let {
    checked = false,
    children,
    components: propComponents = {},
    isDisabled = false,
    isRequired,
    name,
    onChange,
    icon: IconContent,
    tabIndex,
    type,
    value,
    id
  } = _ref,
      wrapperProps = _objectWithoutProperties__default['default'](_ref, ["checked", "children", "components", "isDisabled", "isRequired", "name", "onChange", "icon", "tabIndex", "type", "value", "id"]);

  const components = React.useMemo(() => _objectSpread(_objectSpread({}, defaultComponents), propComponents), [propComponents]);
  return /*#__PURE__*/React__default['default'].createElement(components.Wrapper, wrapperProps, /*#__PURE__*/React__default['default'].createElement(reactPseudoState.PseudoState, null, ({
    onBlur,
    onFocus,
    onKeyDown,
    onKeyUp,
    onMouseDown,
    onMouseEnter,
    onMouseLeave,
    onMouseUp,
    onTouchEnd,
    onTouchStart
  }, snapshot) => {
    const labelHandlers = {
      onMouseDown,
      onMouseUp,
      onMouseEnter,
      onMouseLeave,
      onTouchEnd,
      onTouchStart
    };
    const inputHandlers = {
      onBlur,
      onChange,
      onFocus,
      onKeyDown,
      onKeyUp
    };

    const iconProps = _objectSpread(_objectSpread({}, snapshot), {}, {
      checked,
      isDisabled
    });

    return /*#__PURE__*/React__default['default'].createElement(components.Label, _extends__default['default']({
      isChecked: checked,
      isDisabled: isDisabled
    }, labelHandlers), /*#__PURE__*/React__default['default'].createElement(input.HiddenInput, _extends__default['default']({}, inputHandlers, {
      checked: checked,
      disabled: isDisabled,
      name: name,
      required: isRequired,
      tabIndex: tabIndex,
      type: type,
      value: value,
      id: id
    })), /*#__PURE__*/React__default['default'].createElement(Icon, iconProps, /*#__PURE__*/React__default['default'].createElement(IconContent, null)), children ? /*#__PURE__*/React__default['default'].createElement(components.Text, null, children) : null);
  }));
};

const CheckboxIcon = /*#__PURE__*/React.memo(props => /*#__PURE__*/React.createElement("svg", _extends__default['default']({
  focusable: "false",
  height: "24",
  role: "presentation",
  viewBox: "0 0 24 24",
  width: "24"
}, props), /*#__PURE__*/React.createElement("g", {
  fillRule: "evenodd"
}, /*#__PURE__*/React.createElement("rect", {
  className: "outer-stroke",
  fill: "transparent",
  x: "6",
  y: "6",
  width: "12",
  height: "12",
  rx: "2"
}), /*#__PURE__*/React.createElement("rect", {
  className: "inner-stroke",
  fill: "currentColor",
  x: "6",
  y: "6",
  width: "12",
  height: "12",
  rx: "2"
}), /*#__PURE__*/React.createElement("path", {
  d: "M9.707 11.293a1 1 0 1 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 1 0-1.414-1.414L11 12.586l-1.293-1.293z",
  fill: "inherit"
}))));
const RadioIcon = /*#__PURE__*/React.memo(props => /*#__PURE__*/React.createElement("svg", _extends__default['default']({
  focusable: "false",
  height: "24",
  role: "presentation",
  viewBox: "0 0 24 24",
  width: "24"
}, props), /*#__PURE__*/React.createElement("g", {
  fillRule: "evenodd"
}, /*#__PURE__*/React.createElement("circle", {
  className: "outer-stroke",
  fill: "transparent",
  cx: "12",
  cy: "12",
  r: "7"
}), /*#__PURE__*/React.createElement("circle", {
  className: "inner-stroke",
  fill: "currentColor",
  cx: "12",
  cy: "12",
  r: "7"
}), /*#__PURE__*/React.createElement("circle", {
  fill: "inherit",
  cx: "12",
  cy: "12",
  r: "2"
}))));
const CheckboxPrimitive = props => /*#__PURE__*/React.createElement(Control, _extends__default['default']({
  icon: CheckboxIcon,
  type: "checkbox"
}, props));
const RadioPrimitive = props => /*#__PURE__*/React.createElement(Control, _extends__default['default']({
  icon: RadioIcon,
  type: "radio"
}, props));

const Checkbox = props => /*#__PURE__*/React__default['default'].createElement(reactRadios.Checkbox, _extends__default['default']({
  component: CheckboxPrimitive
}, props));
const CheckboxGroup = props => /*#__PURE__*/React__default['default'].createElement(reactRadios.CheckboxGroup, props);
const Radio = props => /*#__PURE__*/React__default['default'].createElement(reactRadios.Radio, _extends__default['default']({
  component: RadioPrimitive
}, props));
const RadioGroup = props => /*#__PURE__*/React__default['default'].createElement(reactRadios.RadioGroup, props);

exports.Checkbox = Checkbox;
exports.CheckboxGroup = CheckboxGroup;
exports.CheckboxPrimitive = CheckboxPrimitive;
exports.Radio = Radio;
exports.RadioGroup = RadioGroup;
exports.RadioPrimitive = RadioPrimitive;
