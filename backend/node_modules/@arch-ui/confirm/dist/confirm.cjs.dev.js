'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var react = require('react');
var reactDom = require('react-dom');
var ScrollLock = require('react-scrolllock');
var core = require('@emotion/core');
var styled = require('@emotion/styled');
var theme = require('@arch-ui/theme');
var FocusTrap = require('focus-trap-react');
var modalUtils = require('@arch-ui/modal-utils');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var ScrollLock__default = /*#__PURE__*/_interopDefault(ScrollLock);
var styled__default = /*#__PURE__*/_interopDefault(styled);
var FocusTrap__default = /*#__PURE__*/_interopDefault(FocusTrap);

const innerGutter = 15; // Styled Components
// ------------------------------

const Positioner = styled__default['default'].div({
  display: 'flex',
  justifyContent: 'center',
  left: 0,
  position: 'fixed',
  top: 0,
  width: '100%',
  zIndex: 2
});
const Dialog = /*#__PURE__*/react.forwardRef((_ref, ref) => {
  let {
    component: Tag,
    width
  } = _ref,
      props = _objectWithoutProperties__default['default'](_ref, ["component", "width"]);

  return core.jsx(Tag, _extends__default['default']({
    ref: ref,
    role: "alertdialog",
    css: {
      backgroundColor: 'white',
      borderBottomRightRadius: theme.borderRadius * 2,
      borderBottomLeftRadius: theme.borderRadius * 2,
      boxShadow: theme.shadows[2],
      display: 'flex',
      flexDirection: 'column',
      maxHeight: '100%',
      maxWidth: '96%',
      width: width
    }
  }, props));
}); // Content

const Body = styled__default['default'].div({
  lineHeight: 1.4,
  padding: innerGutter
});
const ModalConfirm = /*#__PURE__*/react.memo(({
  attachTo = typeof document !== 'undefined' ? document.body : null,
  children,
  component = 'div',
  onKeyDown,
  transitionState,
  width = 400
}) => {
  react.useEffect(() => {
    const handleKeyDown = e => {
      if (onKeyDown) onKeyDown(e);
    };

    document.addEventListener('keydown', handleKeyDown, false);
    return () => {
      document.removeEventListener('keydown', handleKeyDown, false);
    };
  }, [onkeydown]);

  if (!attachTo) {
    return null;
  }

  return /*#__PURE__*/reactDom.createPortal(core.jsx(react.Fragment, null, core.jsx(modalUtils.Blanket, {
    style: modalUtils.fade(transitionState),
    isTinted: true,
    isLight: true
  }), core.jsx(Positioner, {
    style: modalUtils.zoomInDown(transitionState)
  }, core.jsx(FocusTrap__default['default'], null, core.jsx(Dialog, {
    component: component,
    width: width
  }, core.jsx(Body, null, children))), core.jsx(ScrollLock__default['default'], null))), attachTo);
});
var index = modalUtils.withTransitionState(ModalConfirm);

exports.default = index;
